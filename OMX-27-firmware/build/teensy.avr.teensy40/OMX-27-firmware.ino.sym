
/private/var/folders/yr/s09md3pj6rnb8t8j8h_nm_rw0000gn/T/arduino/sketches/398372C76D3828057F9BC5FFDF31A16D/OMX-27-firmware.ino.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001c7c l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
000304e0 l    d  .fini	00000000 .fini
000304e4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
2000aac0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
6003d708 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
60001428 l     F .text.code	000001f8 ResetHandler2
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
0001af74 l     F .text.itcm	00000044 _GLOBAL__sub_I__ZN7TwoWire5beginEv
00000000 l    df *ABS*	00000000 analog.c
20011b41 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2000f218 l     O .bss	00000004 s_hotCount
2000f21c l     O .bss	00000004 s_hotTemp
2000f220 l     O .bss	00000004 s_hot_ROOM
2000f224 l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 usb.c
0001fd3c l     F .text.itcm	00000088 schedule_transfer
0001fdc4 l     F .text.itcm	00000036 run_callbacks
0001fdfc l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
2000b9bc l     O .bss	00000008 endpoint0_buffer
2000b9c4 l     O .bss	00000004 endpoint0_notify_mask
2000aec0 l     O .bss	00000008 endpoint0_setupdata
2000b9c8 l     O .bss	00000004 endpointN_notify_mask
2000f1cc l     O .bss	00000008 reply_buffer
20011b47 l     O .bss	00000001 sof_usage
20011b55 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
2000c718 l     O .bss	00000000 object.0
60001c38 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 OMX-27-firmware.ino.cpp
000013fc l     F .text.itcm	0000013c _GLOBAL__sub_I__getpid
00000000 l    df *ABS*	00000000 ClearUI_Display.cpp
00001538 l     F .text.itcm	00000048 _GLOBAL__sub_I_display
00000000 l    df *ABS*	00000000 MM.cpp
000022c8 l     F .text.itcm	00000094 _GLOBAL__sub_I__ZN2MM5beginEv
2000b48c l     O .bss	00000004 (anonymous namespace)::theSerialInstance
2000b490 l     O .bss	00000110 (anonymous namespace)::HWMIDI
00000000 l    df *ABS*	00000000 config.cpp
0000235c l     F .text.itcm	0000001c __tcf_0
00002378 l     F .text.itcm	00000184 _GLOBAL__sub_I_DEFAULT_MODE
00000000 l    df *ABS*	00000000 music_scales.cpp
00008ecc l     F .text.itcm	00000028 _GLOBAL__sub_I_tempFullNoteName
2000064c l     O .data	000000f5 scalePatterns
00000000 l    df *ABS*	00000000 noteoffs.cpp
00009244 l     F .text.itcm	0000003c _GLOBAL__sub_I__ZN18PendingNoteHistoryC2Ev
00000000 l    df *ABS*	00000000 omx_disp.cpp
00009924 l     F .text.itcm	0000004c _GLOBAL__sub_I_u8g2_display
00009b90 l     F .text.itcm	0000006c OmxDisp::renderMessage() [clone .part.0]
00000000 l    df *ABS*	00000000 omx_leds.cpp
0000ba90 l     F .text.itcm	0000006c _GLOBAL__sub_I_strip
00000000 l    df *ABS*	00000000 omx_util.cpp
00016830 l     F .text.itcm	00000050 OmxUtil::cvNoteOn(int) [clone .part.0]
00016e10 l     F .text.itcm	00000014 _GLOBAL__sub_I__ZN7OmxUtil5setupEv
2000b5e0 l     O .bss	00000004 OmxUtil::advanceSteps(unsigned long)::timeToNextStep
00000000 l    df *ABS*	00000000 sequencer.cpp
000179f8 l     F .text.itcm	00000060 seqReset() [clone .part.0]
00018af4 l     F .text.itcm	00000010 _GLOBAL__sub_I_lastNote
00000000 l    df *ABS*	00000000 storage.cpp
00018c10 l     F .text.itcm	00000004 _GLOBAL__sub_I__ZN7Storage11initStorageEv
00000000 l    df *ABS*	00000000 submode_midifxgroup.cpp
00018f90 l     F .text.itcm	0000005c __tcf_0
00019e58 l     F .text.itcm	00000170 SubModeMidiFxGroup::moveSelectedMidiFX(signed char) [clone .part.0]
0001a218 l     F .text.itcm	00000030 _GLOBAL__sub_I_subModeMidiFx
00000000 l    df *ABS*	00000000 SPI.cpp
0001b76c l     F .text.itcm	00000048 _GLOBAL__sub_I__ZN8SPIClass5beginEv
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
0001e4ec l     F .text.itcm	00000074 _GLOBAL__sub_I_IRQHandler_Serial1
2000b3f8 l     O .bss	00000040 rx_buffer1
2000b438 l     O .bss	00000040 tx_buffer1
20000744 l     O .data	00000064 UART6_Hardware
00000000 l    df *ABS*	00000000 eh_alloc.o
000216f4 l     F .text.itcm	00000088 (anonymous namespace)::pool::free(void*) [clone .constprop.0]
0002177c l     F .text.itcm	00000058 (anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]
00021824 l     F .text.itcm	00000028 _GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv
00000000 l    df *ABS*	00000000 Adafruit_SSD1306.cpp
0001b8a8 l     F .text.itcm	00000088 Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]
0001b930 l     F .text.itcm	00000160 Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]
60001d6c l     O .text.progmem	00000008 Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short)::premask
60001d74 l     O .text.progmem	00000008 Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short)::postmask
60001d7c l     O .text.progmem	000002c0 splash1_data
6000203c l     O .text.progmem	000001e0 splash2_data
6000221c l     O .text.progmem	00000004 Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init1
60002220 l     O .text.progmem	00000004 Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init2
60002224 l     O .text.progmem	00000004 Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init3
60002228 l     O .text.progmem	00000006 Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init5
60002230 l     O .text.progmem	00000005 Adafruit_SSD1306::display()::dlist1
60002238 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrollright(unsigned char, unsigned char)::scrollList1a
6000223c l     O .text.progmem	00000003 Adafruit_SSD1306::startscrollright(unsigned char, unsigned char)::scrollList1b
60002240 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrollleft(unsigned char, unsigned char)::scrollList2a
60002244 l     O .text.progmem	00000003 Adafruit_SSD1306::startscrollleft(unsigned char, unsigned char)::scrollList2b
60002248 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagright(unsigned char, unsigned char)::scrollList3a
6000224c l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagright(unsigned char, unsigned char)::scrollList3b
60002250 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagright(unsigned char, unsigned char)::scrollList3c
60002254 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagleft(unsigned char, unsigned char)::scrollList4a
60002258 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagleft(unsigned char, unsigned char)::scrollList4b
6000225c l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagleft(unsigned char, unsigned char)::scrollList4c
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
0001d29c l     F .text.itcm	00000076 Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.0]
60002260 l     O .text.progmem	00000100 _NeoPixelGammaTable
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 serialEvent1.cpp
00000000 l    df *ABS*	00000000 usb_desc.c
2000a070 l     O .data	00000012 device_descriptor
2000a368 l     O .data	00000021 seremu_report_desc
60002480 l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 ClearUI_Input.cpp
00000000 l    df *ABS*	00000000 euclidean_sequencer.cpp
00000000 l    df *ABS*	00000000 midifx_arpeggiator.cpp
00003934 l     F .text.itcm	000000a8 midifx::MidiFXArpeggiator::playNote(unsigned long, short, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 midifx_chance.cpp
00000000 l    df *ABS*	00000000 midifx_harmonizer.cpp
00000000 l    df *ABS*	00000000 midifx_interface.cpp
00000000 l    df *ABS*	00000000 midifx_monophonic.cpp
00000000 l    df *ABS*	00000000 midifx_randomizer.cpp
00000000 l    df *ABS*	00000000 midifx_scaler.cpp
00000000 l    df *ABS*	00000000 midifx_transpose.cpp
00000000 l    df *ABS*	00000000 midimacro_interface.cpp
00000000 l    df *ABS*	00000000 midimacro_m8.cpp
00000000 l    df *ABS*	00000000 midimacro_norns.cpp
00000000 l    df *ABS*	00000000 omx_keypad.cpp
00000000 l    df *ABS*	00000000 omx_mode_chords.cpp
0000bbc8 l     F .text.itcm	000000c4 OmxModeChords::loadPreset(unsigned char) [clone .part.0]
0000bc8c l     F .text.itcm	000000cc OmxModeChords::savePreset(unsigned char) [clone .part.0]
0000cc9c l     F .text.itcm	0000002a OmxModeChords::onChordEditOff() [clone .part.0]
0000ef80 l     F .text.itcm	000004e8 OmxModeChords::onEncoderChangedEditParam(Encoder::Update*, unsigned char, unsigned char, unsigned char) [clone .part.0]
20000598 l     O .data	00000045 chordBalance
200005e0 l     O .data	0000006c chordPatterns
00000000 l    df *ABS*	00000000 omx_mode_euclidean.cpp
00000000 l    df *ABS*	00000000 omx_mode_grids.cpp
00012df0 l     F .text.itcm	00000180 OmxModeGrids::updateLEDs() [clone .part.0]
20000cb8 l     O .data	00000020 seqColors
00000000 l    df *ABS*	00000000 omx_mode_midi_keyboard.cpp
20000544 l     O .data	0000001c CSWTCH.157
00000000 l    df *ABS*	00000000 omx_mode_sequencer.cpp
20000578 l     O .data	00000020 muteColors
200007a8 l     O .data	00000010 sequencePageColors
20000cd8 l     O .data	00000020 seqColors
00000000 l    df *ABS*	00000000 omx_screensaver.cpp
0001662c l     F .text.itcm	00000154 OmxScreensaver::updateLEDs() [clone .part.0]
00000000 l    df *ABS*	00000000 param_manager.cpp
00016f2c l     F .text.itcm	0000008c ParamManager::incrementParam() [clone .part.0]
00000000 l    df *ABS*	00000000 retro_grids.cpp
000173e0 l     F .text.itcm	00000290 grids::GridsWrapper::gridsTick() [clone .part.0]
200011c0 l     O .data	00000060 grids::node_0
20001220 l     O .data	00000060 grids::node_1
20001280 l     O .data	00000060 grids::node_2
200012e0 l     O .data	00000060 grids::node_3
20001340 l     O .data	00000060 grids::node_4
200013a0 l     O .data	00000060 grids::node_5
20001400 l     O .data	00000060 grids::node_6
20001460 l     O .data	00000060 grids::node_7
200014c0 l     O .data	00000060 grids::node_8
20001520 l     O .data	00000060 grids::node_9
20001580 l     O .data	00000060 grids::node_10
200015e0 l     O .data	00000060 grids::node_11
20001640 l     O .data	00000060 grids::node_12
200016a0 l     O .data	00000060 grids::node_13
20001700 l     O .data	00000060 grids::node_14
20001760 l     O .data	00000060 grids::node_15
200017c0 l     O .data	00000060 grids::node_16
20001820 l     O .data	00000060 grids::node_17
20001880 l     O .data	00000060 grids::node_18
200018e0 l     O .data	00000060 grids::node_19
20001940 l     O .data	00000060 grids::node_20
200019a0 l     O .data	00000060 grids::node_21
20001a00 l     O .data	00000060 grids::node_22
20001a60 l     O .data	00000060 grids::node_23
20001ac0 l     O .data	00000060 grids::node_24
20001b20 l     O .data	00000064 grids::drum_map
00000000 l    df *ABS*	00000000 submode_interface.cpp
00000000 l    df *ABS*	00000000 submode_potconfig.cpp
00000000 l    df *ABS*	00000000 sysex.cpp
00000000 l    df *ABS*	00000000 ResponsiveAnalogRead.cpp
00000000 l    df *ABS*	00000000 Adafruit_MCP4725.cpp
00000000 l    df *ABS*	00000000 Adafruit_I2CDevice.cpp
00000000 l    df *ABS*	00000000 Adafruit_SPIDevice.cpp
00000000 l    df *ABS*	00000000 Adafruit_GFX.cpp
200007b8 l     O .data	00000500 font
00000000 l    df *ABS*	00000000 Adafruit_EEPROM_I2C.cpp
00000000 l    df *ABS*	00000000 Adafruit_FRAM_I2C.cpp
00000000 l    df *ABS*	00000000 Adafruit_Keypad.cpp
00000000 l    df *ABS*	00000000 U8g2_for_Adafruit_GFX.cpp
0001d7f8 l     F .text.itcm	0000000e u8g2_font_get_word(unsigned char const*, unsigned char)
0001d808 l     F .text.itcm	00000056 u8g2_font_decode_get_unsigned_bits(_u8g2_font_decode_t*, unsigned char)
0001d860 l     F .text.itcm	00000014 u8g2_font_decode_get_signed_bits(_u8g2_font_decode_t*, unsigned char)
0001d874 l     F .text.itcm	00000022 u8g2_add_vector_y(short, signed char, signed char, unsigned char)
0001d898 l     F .text.itcm	00000022 u8g2_add_vector_x(short, signed char, signed char, unsigned char)
0001d90c l     F .text.itcm	000000b8 u8g2_font_decode_len(_u8g2_font_t*, unsigned char, unsigned char)
0001d9c4 l     F .text.itcm	000000d0 u8g2_font_decode_glyph(_u8g2_font_t*, unsigned char const*)
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0001e568 l     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 WMath.cpp
2000b478 l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 WString.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 eeprom.c
0001f07c l     F .text.itcm	0000005c flash_wait
20011b42 l     O .bss	00000001 initialized
2000f238 l     O .bss	0000001e sector_index
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.S.o
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 usb_midi.c
00020668 l     F .text.itcm	00000040 sysex_byte
000206a8 l     F .text.itcm	00000060 rx_queue_transfer
00020708 l     F .text.itcm	00000064 rx_event
0002076c l     F .text.itcm	0000013c usb_midi_write_packed.part.0
2000f1d4 l     O .bss	00000004 rx_available
2000f1dc l     O .bss	0000000c rx_count
20011b43 l     O .bss	00000001 rx_head
2000f1e8 l     O .bss	0000000c rx_index
2000f204 l     O .bss	00000007 rx_list
20011b32 l     O .bss	00000002 rx_packet_size
20011b45 l     O .bss	00000001 rx_tail
2000ab00 l     O .bss	000000c0 rx_transfer
20011b48 l     O .bss	00000001 transmit_previous_timeout
20011b34 l     O .bss	00000002 tx_available
20011b4a l     O .bss	00000001 tx_head
20011b4c l     O .bss	00000001 tx_noautoflush
20011b38 l     O .bss	00000002 tx_packet_size
2000acc0 l     O .bss	00000080 tx_transfer
20200080 l     O .bss.dma	00000c00 rx_buffer
20200c80 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 usb_seremu.c
0002106c l     F .text.itcm	0000004c rx_queue_transfer
000210b8 l     F .text.itcm	00000058 rx_event
000212f4 l     F .text.itcm	00000048 usb_seremu_flush_callback
0002133c l     F .text.itcm	0000013c usb_seremu_write.part.0
2000f1d8 l     O .bss	00000004 rx_available
20011b44 l     O .bss	00000001 rx_head
2000f1f4 l     O .bss	00000010 rx_index
2000f20c l     O .bss	00000009 rx_list
20011b46 l     O .bss	00000001 rx_tail
2000abc0 l     O .bss	00000100 rx_transfer
20011b49 l     O .bss	00000001 transmit_previous_timeout
20011b36 l     O .bss	00000002 tx_available
20011b4b l     O .bss	00000001 tx_head
20011b4d l     O .bss	00000001 tx_noautoflush
2000ad40 l     O .bss	00000180 tx_transfer
20201480 l     O .bss.dma	00000100 rx_buffer
20201580 l     O .bss.dma	00000300 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20011b3f l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 functexcept.o
00000000 l    df *ABS*	00000000 bad_alloc.o
00000000 l    df *ABS*	00000000 eh_arm.o
00000000 l    df *ABS*	00000000 eh_exception.o
00000000 l    df *ABS*	00000000 eh_globals.o
00000000 l    df *ABS*	00000000 eh_personality.o
00021a0c l     F .text.itcm	000000c0 read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)
00021acc l     F .text.itcm	00000048 base_of_encoded_value(unsigned char, _Unwind_Context*)
00021b14 l     F .text.itcm	00000090 parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)
00000000 l    df *ABS*	00000000 eh_terminate.o
00000000 l    df *ABS*	00000000 eh_throw.o
00022098 l     F .text.itcm	0000004c __gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
00000000 l    df *ABS*	00000000 si_class_type_info.o
00000000 l    df *ABS*	00000000 tinfo.o
00000000 l    df *ABS*	00000000 vterminate.o
00000000 l    df *ABS*	00000000 stdexcept.o
00000000 l    df *ABS*	00000000 cow-stdexcept.o
00000000 l    df *ABS*	00000000 cow-string-inst.o
00000000 l    df *ABS*	00000000 class_type_info.o
00000000 l    df *ABS*	00000000 cp-demangle.o
00022758 l     F .text.itcm	000000f0 d_make_comp
00022848 l     F .text.itcm	00000074 d_number
000228bc l     F .text.itcm	00000046 d_call_offset
00022904 l     F .text.itcm	00000036 d_ref_qualifier
0002293c l     F .text.itcm	000000d4 d_count_templates_scopes
00022a10 l     F .text.itcm	0000001c d_pack_length
00022a2c l     F .text.itcm	00000048 d_discriminator
00022a74 l     F .text.itcm	0000001c d_index_template_argument.part.0
00022a90 l     F .text.itcm	00000078 d_growable_string_callback_adapter
00022b08 l     F .text.itcm	00000030 next_is_type_qual.isra.0
00022b38 l     F .text.itcm	00000044 d_append_char
00022b7c l     F .text.itcm	00000036 d_lookup_template_argument
00022bb4 l     F .text.itcm	00000094 d_find_pack
00022c48 l     F .text.itcm	00000066 d_append_string
00022cb0 l     F .text.itcm	0000005e d_template_param
00022d10 l     F .text.itcm	00000078 d_append_num
00022d88 l     F .text.itcm	000000e0 d_source_name
00022e68 l     F .text.itcm	00000194 d_substitution
00022ffc l     F .text.itcm	0000086e d_type
00024650 l     F .text.itcm	00000152 d_cv_qualifiers
00023934 l     F .text.itcm	0000006a d_function_type
00024c18 l     F .text.itcm	0000029c d_name
00023f60 l     F .text.itcm	00000064 d_template_args_1
000240f0 l     F .text.itcm	000004ec d_expression_1
0002386c l     F .text.itcm	00000080 d_parmlist
000238ec l     F .text.itcm	00000048 d_bare_function_type
000239a0 l     F .text.itcm	00000108 d_operator_name
00023aa8 l     F .text.itcm	00000340 d_unqualified_name
00023de8 l     F .text.itcm	00000120 d_expr_primary
00024eb4 l     F .text.itcm	000000f6 d_encoding.part.0
000247a4 l     F .text.itcm	00000474 d_special_name
00023f08 l     F .text.itcm	00000058 d_template_arg
00023fc4 l     F .text.itcm	0000012a d_prefix
000245dc l     F .text.itcm	00000072 d_exprlist
00024fac l     F .text.itcm	000020f4 d_print_comp_inner
000270a0 l     F .text.itcm	0000005a d_print_comp
00027734 l     F .text.itcm	000001d8 d_print_function_type
000281f0 l     F .text.itcm	00000254 d_maybe_print_fold_expression
00028444 l     F .text.itcm	000001e4 d_maybe_print_designated_init
00028114 l     F .text.itcm	000000da d_print_subexpr
00027d1c l     F .text.itcm	00000076 d_print_expr_op
000270fc l     F .text.itcm	00000638 d_print_mod
00027b54 l     F .text.itcm	000001c8 d_print_array_type
0002790c l     F .text.itcm	00000248 d_print_mod_list
00027d94 l     F .text.itcm	0000037e d_demangle_callback.constprop.0
00000000 l    df *ABS*	00000000 eh_call.o
000286ec l     F .text.itcm	0000003a __cxxabiv1::__is_gxx_exception_class(char*)
00000000 l    df *ABS*	00000000 eh_catch.o
00000000 l    df *ABS*	00000000 eh_type.o
00000000 l    df *ABS*	00000000 unwind-arm.o
00028950 l     F .text.itcm	00000012 selfrel_offset31
00028964 l     F .text.itcm	0000005c search_EIT_table
000289c0 l     F .text.itcm	00000028 __gnu_unwind_get_pr_addr
000289e8 l     F .text.itcm	00000098 get_eit_entry
00028a80 l     F .text.itcm	00000058 restore_non_core_regs
00028ad8 l     F .text.itcm	0000000a _Unwind_decode_typeinfo_ptr.constprop.0
00028ae4 l     F .text.itcm	00000002 _Unwind_DebugHook
00028ae8 l     F .text.itcm	0000003a unwind_phase2
00028b24 l     F .text.itcm	000000ca unwind_phase2_forced
00028d00 l     F .text.itcm	0000001a _Unwind_GetGR
00028d4c l     F .text.itcm	00000018 _Unwind_SetGR
00028de8 l     F .text.itcm	000002a8 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.o
00029504 l     F .text.itcm	00000038 next_unwind_byte
0002953c l     F .text.itcm	0000001a _Unwind_GetGR.constprop.0
00029558 l     F .text.itcm	00000004 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 libc_a-calloc.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-itoa.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-rand.o
00000000 l    df *ABS*	00000000 libc_a-realloc.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-utoa.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0002a43c l     F .text.itcm	00000018 stdio_exit_handler
0002a454 l     F .text.itcm	00000040 cleanup_stdio
0002a494 l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fputc.o
00000000 l    df *ABS*	00000000 libc_a-fputs.o
00000000 l    df *ABS*	00000000 libc_a-vsnprintf.o
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-fwrite.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-memset.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-efgcvt.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-strcmp.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-putc.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-ecvtbuf.o
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
0002e2c8 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
0002f204 l     F .text.itcm	00000076 __sprint_r.part.0
00030208 l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 u8g2_fonts.c
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 eh_term_handler.o
00000000 l    df *ABS*	00000000 eh_unex_handler.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 usb_names.c
000304c8 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
000304d0 l     F .text.itcm	00000008 ___init_veneer
000304d8 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
60001c00 l     F .text.code	00000008 __memset_veneer
60001c08 l     F .text.code	00000008 __pwm_init_veneer
60001c10 l     F .text.code	00000008 __delay_veneer
60001c18 l     F .text.code	00000008 __main_veneer
60001c20 l     F .text.code	00000008 __set_arm_clock_veneer
60001c28 l     F .text.code	00000008 ____libc_init_array_veneer
60001c30 l     F .text.code	00000008 __usb_init_serialnumber_veneer
0002168c g     F .text.itcm	00000030 std::__throw_length_error(char const*)
20002090 g     O .data	00000020 typeinfo name for __cxxabiv1::__forced_unwind
0002243c g     F .text.itcm	00000040 std::logic_error::~logic_error()
0001f464 g     F .text.itcm	00000010 main
0000b3d4 g     F .text.itcm	00000056 OMXKeypad::next()
200025f8 g     O .data	0000002c vtable for __cxxabiv1::__si_class_type_info
0002165c g     F .text.itcm	00000030 std::__throw_logic_error(char const*)
000225cc g     F .text.itcm	00000014 std::length_error::length_error(char const*)
0002af14 g     F .text.itcm	00000024 _sbrk_r
000211c0 g     F .text.itcm	00000068 usb_seremu_getchar
000304a4 g     F .text.itcm	00000024 _wcsnrtombs_r
0000aae8 g     F .text.itcm	00000130 OmxDisp::dispChar16(char const**, unsigned char, unsigned char, unsigned char, signed char, bool, bool, char const**, unsigned char)
0002af38 g     F .text.itcm	0000002c _write_r
20002028 g     O .data	00000008 typeinfo for __cxxabiv1::__forced_unwind
000027d4 g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getMidiChannel()
2000955e g     O .data	00000001 EEPROM_VERSION
2000c7e4 g     O .bss	0000001c omxLeds
0001e7c0 g     F .text.itcm	0000003a String::String(String const&)
0000ebc4 g     F .text.itcm	00000158 OmxModeChords::doNoteOn(int, unsigned char, unsigned char, unsigned char)
00008f90 g     F .text.itcm	0000005e PendingNoteOffs::play(unsigned long)
0002ac04 g     F .text.itcm	00000060 memcmp
000061c0 g     F .text.itcm	00000030 midifx::MidiFXChance::MidiFXChance()
0001d7d4 g     F .text.itcm	00000024 Adafruit_NeoPixel::gamma32(unsigned long)
2000b5a0 g     O .bss	00000004 EventResponder::firstYield
000098d4 g     F .text.itcm	00000038 OmxDisp::showDisplay()
2000a084 g     O .data	00000094 kChordMsg
00017360 g     F .text.itcm	00000080 grids::GridsWrapper::onNoteOn(unsigned char, unsigned char, unsigned char, unsigned char, float, bool, bool, unsigned long)
0002e0d8 g     F .text.itcm	0000002c _read_r
00008ff0 g     F .text.itcm	000000b8 PendingNoteOffs::sendOffIfPresent(int, int, bool)
20011a04 g     O .bss	00000122 usb_midi_msg_sysex
0002af64 g     F .text.itcm	0000000c __errno
00004730  w    F .text.itcm	00000020 std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> >::_M_erase(__gnu_cxx::__normal_iterator<midifx::MidiFXArpeggiator::ArpNote*, std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> > >)
000069ec g     F .text.itcm	00000008 midifx::MidiFXMonophonic::getColor()
00006b98 g     F .text.itcm	000000b4 midifx::MidiFXMonophonic::onDisplayUpdate(unsigned char)
0002da64 g     F .text.itcm	00000154 __mdiff
0001b430 g     F .text.itcm	000000dc _spi_dma_rxISR0()
00000584 g     F .text.itcm	00000004 OnNoteOn
0001ea14 g     F .text.itcm	0000001c String::append(char const*)
00020adc g     F .text.itcm	00000110 usb_midi_send_sysex_add_term_bytes
0000e96c g     F .text.itcm	0000004c OmxModeChords::onManualStrumOn(unsigned char)
20002068 g     O .data	0000000c typeinfo for std::bad_exception
2000a198 g     O .data	00000004 longPressInterval
0002e3f0 g     F .text.itcm	00000cec _dtoa_r
00003f1c g     F .text.itcm	00000008 midifx::MidiFXArpeggiator::getOctaveRange()
20002b60 g     O .data	00000014 vtable for std::length_error
00029834 g     F .text.itcm	00000006 .hidden _Unwind_GetDataRelBase
00005f5c g     F .text.itcm	00000002 midifx::MidiFXChance::onEnabled()
00013760 g     F .text.itcm	0000002c OmxModeMidiKeyboard::enableSubmode(SubmodeInterface*)
0001df38 g     F .text.itcm	00000092 HardwareSerial::read()
0001fcd4  w    F .text.itcm	00000004 abort
2000b9cc g     O .bss	00000004 errno
0000b500  w    F .text.itcm	00000020 std::vector<OMXKeypad::keystate*, std::allocator<OMXKeypad::keystate*> >::_M_erase(__gnu_cxx::__normal_iterator<OMXKeypad::keystate**, std::vector<OMXKeypad::keystate*, std::allocator<OMXKeypad::keystate*> > >)
20002b9c  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
200023fc g     O .data	0000005c vtable for OmxModeSequencer
0002da20 g     F .text.itcm	00000042 __mcmp
0001c1d0 g     F .text.itcm	000001c0 Adafruit_SSD1306::display()
0002b880 g     F .text.itcm	00001b44 _svfprintf_r
0001e560  w    F .text.itcm	00000006 usb_seremu_class::write(unsigned char)
00007c70 g     F .text.itcm	00000006 midimacro::MidiMacroInterface::setDoNoteOff(void (*)(void*, unsigned char), void*)
00029ee4 g     F .text.itcm	00000018 realloc
00007d78 g     F .text.itcm	00000010 midimacro::MidiMacroM8::onEncoderChangedEditParam(Encoder::Update)
000179f0 g     F .text.itcm	00000006 grids::GridsWrapper::getSwing()
200025cc g     O .data	0000002c vtable for __cxxabiv1::__class_type_info
000219fc g     F .text.itcm	00000008 __cxa_get_globals_fast
0002097c g     F .text.itcm	000000a0 usb_midi_flush_output
60001c7c g       .text.code	00000000 __init_array_end
0002e05c g     F .text.itcm	0000002c _fstat_r
000124d8 g     F .text.itcm	000000a8 OmxModeGrids::onNoteTriggered(unsigned char, MidiNoteGroup)
000069e4 g     F .text.itcm	00000008 midifx::MidiFXMonophonic::getDispName()
0001a49c g     F .text.itcm	000000d0 SubModePotConfig::setupPageLegends()
00018124 g     F .text.itcm	0000047c playNote(int)
00012f7c g     F .text.itcm	000002e0 OmxModeGrids::setupPageLegends()
000069d4 g     F .text.itcm	00000002 midifx::MidiFXInterface::~MidiFXInterface()
0000ccc8 g     F .text.itcm	000000d0 OmxModeChords::onNotePostFX(MidiNoteGroup)
00006210 g     F .text.itcm	0000004c midifx::MidiFXHarmonizer::saveToDisk(int, Storage*)
00007d38  w    F .text.itcm	00000004 midimacro::MidiMacroM8::consumesDisplay()
200118c8 g     O .bss	00000004 temp
00011cdc g     F .text.itcm	0000001c OmxModeGrids::onEncoderButtonDown()
0002196c g     F .text.itcm	00000070 __gnu_end_cleanup
00017748 g     F .text.itcm	0000000a grids::GridsWrapper::getSnapShot(unsigned char)
000077bc g     F .text.itcm	00000004 midifx::MidiFXTranspose::getFXType()
20001df0 g     O .data	00000050 SPIClass::spiclass_lpspi4_hardware
000171bc g     F .text.itcm	00000168 grids::GridsWrapper::GridsWrapper()
000168c4 g     F .text.itcm	000000a8 OmxUtil::advanceClock(OmxModeInterface*, unsigned long)
0002213c g     F .text.itcm	00000038 __cxa_throw
0002e1a8 g     F .text.itcm	0000004c _wcrtomb_r
20009d68 g     O .data	00000048 colorConfig
000167d0 g     F .text.itcm	0000004c OmxScreensaver::updateScreenSaverState()
0001f00c g     F .text.itcm	00000070 pinMode
0001b50c  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
00018b14  w    F .text.itcm	00000006 FRAMStorage::capacity()
20011b80 g       .bss	00000000 _ebss
00018d50 g     F .text.itcm	00000020 SubModeMidiFxGroup::onEncoderChangedEditParam(Encoder::Update)
0002b36c g     F .text.itcm	00000002 __retarget_lock_release_recursive
000293e4 g     F .text.itcm	00000000 .hidden __gnu_Unwind_Save_WMMXD
00017994 g     F .text.itcm	00000008 grids::GridsWrapper::setY(unsigned char, unsigned char)
2000a438 g     O .data	00000120 trigConditionsAB
2000b8f8 g     O .bss	00000020 clockConfig
60001820 g     F .text.code	00000002 startup_default_early_hook
00014514 g     F .text.itcm	00000074 OmxModeMidiKeyboard::doNoteOff(unsigned char)
0001711c g     F .text.itcm	000000a0 grids::GridsChannel::ReadDrumMap(unsigned char, unsigned char, unsigned char, unsigned char)
000170c8 g     F .text.itcm	00000028 ParamManager::setSelPageAndParam(signed char, signed char)
0001d004 g     F .text.itcm	00000010 Adafruit_Keypad::~Adafruit_Keypad()
0001d314 g     F .text.itcm	0000001e Adafruit_NeoPixel::~Adafruit_NeoPixel()
2000b9d0 g     O .bss	00000090 globalScale
0000704c  w    F .text.itcm	0000001c midifx::MidiFXRandomizer::~MidiFXRandomizer()
00028d1c g     F .text.itcm	0000002e .hidden _Unwind_VRS_Set
00017754 g     F .text.itcm	00000040 grids::GridsWrapper::setSnapShot(unsigned char, grids::SnapShotSettings)
2000a23c g     O .data	00000030 noteNamesNoFormat
0000e2c4 g     F .text.itcm	00000650 OmxModeChords::constructChord(unsigned char)
00002610 g     F .text.itcm	0000001c euclidean::EuclideanSequencer::start()
0001d38c g     F .text.itcm	0000007e Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, short, unsigned short)
000069f4 g     F .text.itcm	00000002 midifx::MidiFXMonophonic::onDisabled()
2000a38c g     O .data	0000001c stepTypes
200119e4 g     O .bss	00000004 usb_midi_handleStart
00006cd0 g     F .text.itcm	0000001c midifx::MidiFXMonophonic::getClone()
2000ebe0 g     O .bss	00000288 pendingNoteOffs
00006cec g     F .text.itcm	00000004 midifx::MidiFXRandomizer::getFXType()
00010450 g     F .text.itcm	00000254 OmxModeEuclidean::onPotChanged(int, int, int, int)
000191f4 g     F .text.itcm	0000003e SubModeMidiFxGroup::selectMidiFX(unsigned char)
00009138 g     F .text.itcm	00000042 PendingNoteOns::insert(int, int, int, unsigned long, bool)
0001b220 g     F .text.itcm	0000000c Adafruit_I2CDevice::setSpeed(unsigned long)
0002e030 g     F .text.itcm	00000008 _localeconv_r
000067bc g     F .text.itcm	00000014 midifx::MidiFXInterface::onEncoderButtonDown()
00004a7c g     F .text.itcm	000004bc midifx::MidiFXArpeggiator::sortNotes()
0002e210 g     F .text.itcm	00000078 frexp
2000f168 g     O .bss	00000004 potMinVal
60001650 g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
0000a2dc g     F .text.itcm	00000248 OmxDisp::dispParamLabel(unsigned char, unsigned char, unsigned char, unsigned char, bool, unsigned char, bool, bool, char const*, unsigned char const*, signed char, bool)
0000006c  w    F .text.itcm	00000002 OmxModeInterface::inMidiControlChange(unsigned char, unsigned char, unsigned char)
2000bbb4 g     O .bss	00000014 lastMidiValue
000039dc  w    F .text.itcm	00000068 midifx::MidiFXArpeggiator::~MidiFXArpeggiator()
00022214 g     F .text.itcm	0000003a __cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const
00007d68 g     F .text.itcm	00000010 midimacro::MidiMacroM8::onEncoderButtonDown()
0000c390 g     F .text.itcm	000001d8 OmxModeChords::onEncoderChangedManStrum(Encoder::Update)
000017f8 g     F .text.itcm	00000044 MM::sendNoteOnHW(int, int, int)
000123b0 g     F .text.itcm	0000004c OmxModeGrids::setPageAndParam(unsigned char, unsigned char)
0000ff58 g     F .text.itcm	00000020 OmxModeEuclidean::onClockTick()
00007d54 g     F .text.itcm	00000014 midimacro::MidiMacroM8::onPotChanged(int, int, int, int)
0001b50c  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
00017118 g     F .text.itcm	00000004 ParamManager::getNumPages()
2000203c g     O .data	00000008 typeinfo for __cxxabiv1::__foreign_exception
0000dc30 g     F .text.itcm	000000f8 OmxModeChords::getChordBalanceDetails(unsigned char)
0001cfcc g     F .text.itcm	00000038 Adafruit_Keypad::Adafruit_Keypad(unsigned char*, unsigned char*, unsigned char*, int, int)
2000b918 g     O .bss	00000014 currentValue
0001d648 g     F .text.itcm	0000011e Adafruit_NeoPixel::ColorHSV(unsigned short, unsigned char, unsigned char)
00029e94 g     F .text.itcm	00000010 srand
00007d40 g     F .text.itcm	00000014 midimacro::MidiMacroM8::getName()
0001a454  w    F .text.itcm	0000000e SubModePotConfig::~SubModePotConfig()
00008db4 g     F .text.itcm	0000004c MusicScales::getGroup16Color(unsigned char)
00005f90 g     F .text.itcm	00000084 midifx::MidiFXChance::noteInput(MidiNoteGroup)
000098b0 g     F .text.itcm	00000024 OmxDisp::UpdateMessageTextTimer()
0001de14 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
00008f50 g     F .text.itcm	00000040 PendingNoteOffs::insert(int, int, unsigned long, bool)
000091b0 g     F .text.itcm	00000094 PendingNoteOns::play(unsigned long)
00028cac g     F .text.itcm	00000012 .hidden __gnu_Unwind_Resume_or_Rethrow
2000205c g     O .data	0000000c typeinfo for std::length_error
0000917c g     F .text.itcm	00000034 PendingNoteOns::remove(int, int)
20003bc4 g     O .data	00000010 kArpRates
000147f0 g     F .text.itcm	00000004 OmxModeSequencer::shouldBlockEncEdit()
2000955f g     O .data	00000001 String::zerotermination
0002269c g     F .text.itcm	00000014 __cxxabiv1::__class_type_info::~__class_type_info()
00018c14  w    F .text.itcm	00000002 SubmodeInterface::onModeChanged()
20002080 g     O .data	00000008 typeinfo for std::exception
0003e400 g       *ABS*	00000000 _flashimagelen
000112e8 g     F .text.itcm	00000090 OmxModeEuclidean::toggleMute(unsigned char)
0000833c  w    F .text.itcm	0000001c midimacro::MidiMacroM8::~MidiMacroM8()
00011c78 g     F .text.itcm	00000006 OmxModeGrids::onClockTick()
00011778 g     F .text.itcm	00000158 OmxModeEuclidean::setupPageLegends()
00018d70 g     F .text.itcm	0000003c SubModeMidiFxGroup::onDisabled()
20002050 g     O .data	0000000c typeinfo for std::logic_error
2000ee68 g     O .bss	00000300 pendingNoteOns
0000bb24 g     F .text.itcm	00000002 OmxModeChords::InitSetup()
0001573c g     F .text.itcm	00000220 OmxModeSequencer::onEncoderChangedNorm(Encoder::Update)
0001e758 g     F .text.itcm	00000068 random(long, long)
0001aef0 g     F .text.itcm	0000000c lpi2c4_isr()
000288a8 g     F .text.itcm	0000008a __cxa_end_catch
20002188 g     O .data	00000018 vtable for FRAMStorage
0002a2d4 g     F .text.itcm	00000088 snprintf
20011b3a g     O .bss	00000002 usb_midi_msg_sysex_len
000304e0 g     F .fini	00000000 _fini
0001aa3c  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
0002163c g     F .text.itcm	00000020 std::__throw_bad_alloc()
000147e4 g     F .text.itcm	0000000a OmxModeSequencer::onEncoderButtonDown()
000085e8  w    F .text.itcm	00000004 midimacro::MidiMacroNorns::consumesPots()
0001aa00 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
00000104  w    F .text.itcm	00000040 OMXKeypad::~OMXKeypad()
0001dfe8 g     F .text.itcm	00000040 nvic_execution_priority()
0001b064 g     F .text.itcm	00000036 Adafruit_I2CDevice::begin(bool)
0001e638 g     F .text.itcm	0000004c Print::print(String const&)
00007c78 g     F .text.itcm	0000000c midimacro::MidiMacroInterface::DoNoteOn(unsigned char)
000219dc g     F .text.itcm	00000002 std::exception::~exception()
000226cc g     F .text.itcm	00000042 __cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const
0000cdc8 g     F .text.itcm	00000514 OmxModeChords::updateLEDsChordEdit()
0000c950 g     F .text.itcm	00000022 OmxModeChords::setSelPageAndParam(signed char, signed char)
00001a84 g     F .text.itcm	00000010 MM::usbMidiRead()
000205d4 g     F .text.itcm	0000001c usb_receive
00029498 g     F .text.itcm	00000022 .hidden ___Unwind_Resume_or_Rethrow
00018f68  w    F .text.itcm	00000028 SubModeMidiFxGroup::~SubModeMidiFxGroup()
00020658  w    F .text.itcm	00000004 usb_seremu_class::flush()
20010a34 g     O .bss	00000e74 subModeMidiFx
00009344  w    F .text.itcm	000000e4 U8G2_FOR_ADAFRUIT_GFX::write(unsigned char const*, unsigned int)
00007920 g     F .text.itcm	000000a4 midifx::MidiFXTranspose::onEncoderChangedEditParam(Encoder::Update)
000192f4 g     F .text.itcm	00000030 SubModeMidiFxGroup::displayMidiFXName(unsigned char)
200020b0 g     O .data	00000022 typeinfo name for __cxxabiv1::__class_type_info
00007bc8 g     F .text.itcm	00000054 midifx::MidiFXTranspose::getClone()
0001a36c g     F .text.itcm	00000044 SubModePotConfig::onEncoderButtonDown()
0000273c g     F .text.itcm	00000024 euclidean::EuclideanSequencer::setPolyRClockDivMult(unsigned char)
000025b4 g     F .text.itcm	0000005c euclidean::EuclideanSequencer::EuclideanSequencer()
00018898 g     F .text.itcm	00000044 seqStart()
00016af8 g     F .text.itcm	00000004 OmxUtil::areClocksRunning()
0001d180 g     F .text.itcm	00000058 Adafruit_Keypad::begin()
00029378 g     F .text.itcm	00000000 .hidden __gnu_Unwind_Save_VFP
000214bc g     F .text.itcm	00000004 usb_seremu_write_buffer_free
00003b34 g     F .text.itcm	00000220 midifx::MidiFXArpeggiator::MidiFXArpeggiator()
00013490 g     F .text.itcm	00000054 OmxModeMidiKeyboard::inMidiNoteOff(unsigned char, unsigned char, unsigned char)
00008878 g     F .text.itcm	000000c4 midimacro::MidiMacroNorns::onDisplayUpdate()
60001820  w    F .text.code	00000002 startup_early_hook
0001005c  w    F .text.itcm	0000006c OmxModeEuclidean::onNoteTriggeredForwarder(void*, unsigned char, MidiNoteGroup)
0001a110 g     F .text.itcm	00000108 SubModeMidiFxGroup::SubModeMidiFxGroup()
00003fec g     F .text.itcm	0000007a midifx::MidiFXArpeggiator::toggleHold()
00005f60 g     F .text.itcm	00000016 midifx::MidiFXChance::saveToDisk(int, Storage*)
20010a1c g     O .bss	00000018 strip
00016794 g     F .text.itcm	0000003c OmxScreensaver::onDisplayUpdate()
00002760 g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getPolyRClockDivMult()
00012580  w    F .text.itcm	00000032 OmxModeGrids::onNoteTriggeredForwarder(void*, unsigned char, MidiNoteGroup)
0002af88 g     F .text.itcm	000002dc strcmp
60001c7c g     O .text.progmem	00000050 TwoWire::i2c1_hardware
00019114 g     F .text.itcm	0000005c SubModeMidiFxGroup::updateFuncKeyMode()
0001ce30 g     F .text.itcm	00000008 Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C()
20009d48 g     O .data	00000004 __malloc_trim_threshold
00004680  w    F .text.itcm	000000b0 void std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> >::emplace_back<midifx::MidiFXArpeggiator::ArpNote>(midifx::MidiFXArpeggiator::ArpNote&&)
00016e24 g     F .text.itcm	0000002a ParamManager::addPage(unsigned char)
00003d54 g     F .text.itcm	00000120 midifx::MidiFXArpeggiator::getClone()
60002362  w    O .text.progmem	00000001 _serialEvent_default
000072a0 g     F .text.itcm	000000d0 midifx::MidiFXScaler::noteInput(MidiNoteGroup)
0001fcdc g     F .text.itcm	00000060 tempmonGetTemp
00012138 g     F .text.itcm	00000190 OmxModeGrids::onPotChanged(int, int, int, int)
00016fb8 g     F .text.itcm	0000000a ParamManager::incrementParam()
0001798c g     F .text.itcm	00000008 grids::GridsWrapper::getX(unsigned char)
0002df80 g     F .text.itcm	000000b0 __swbuf_r
20009d58 g     O .data	00000004 _impure_ptr
20004ab4 g     O .data	000006fa u8g2_font_5x8_tf
000147f4 g     F .text.itcm	00000038 OmxModeSequencer::onEncoderButtonDownLong()
0001abf0 g     F .text.itcm	000000fc TwoWire::endTransmission(unsigned char)
00009288  w    F .text.itcm	00000022 OmxDisp::~OmxDisp()
000304e4 g       .ARM.exidx	00000000 __exidx_start
00016580  w    F .text.itcm	0000000c OmxScreensaver::onKeyHeldUpdate(OMXKeypadEvent)
00030334 g     F .text.itcm	00000066 _fputwc_r
0001b050 g     F .text.itcm	00000012 Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)
00002ac0 g     F .text.itcm	000000e0 euclidean::EuclideanSequencer::clockTick(unsigned long, unsigned long)
2000c700 g     O .bss	00000018 myEncoder
00000000 g       .text.itcm	00000000 _stext
2000eb38 g     O .bss	00000024 omxScreensaver
0001e028 g     F .text.itcm	00000278 HardwareSerial::begin(unsigned long, unsigned short)
200119b8 g     O .bss	00000004 usb_midi_handleAfterTouch
00016574  w    F .text.itcm	00000004 OmxModeInterface::shouldBlockEncEdit()
2000b8f4 g     O .bss	00000004 activeOmxMode
200020f8 g     O .data	00000025 typeinfo name for __cxxabiv1::__si_class_type_info
0002ad5c g     F .text.itcm	000000a4 memset
000000d4  w    F .text.itcm	00000030 OmxModeMidiKeyboard::~OmxModeMidiKeyboard()
20011b53 g     O .bss	00000001 usb_midi_msg_data2
60001000 g     O .text.headers	00000020 ImageVectorTable
20011b52 g     O .bss	00000001 usb_midi_msg_data1
0000f70c g     F .text.itcm	000004a0 OmxModeChords::onKeyUpdateChordEdit(OMXKeypadEvent)
00018c60 g     F .text.itcm	00000024 SubmodeInterface::setEnabled(bool)
00011b18 g     F .text.itcm	00000158 OmxModeEuclidean::loadFromDisk(int, Storage*)
20280000 g       .text.csf	00000000 _heap_end
0000280c g     F .text.itcm	00000006 euclidean::EuclideanSequencer::setPolyRhythmMode(bool)
00006d08 g     F .text.itcm	00000002 midifx::MidiFXRandomizer::loopUpdate()
000219e4 g     F .text.itcm	00000008 std::bad_exception::what() const
0001657c  w    F .text.itcm	00000002 OmxScreensaver::onEncoderButtonDownLong()
00002804 g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getNoteLength()
00000184  w    F .text.itcm	00000058 OmxModeGrids::~OmxModeGrids()
20002144 g     O .data	00000012 typeinfo name for std::bad_exception
00020518 g     F .text.itcm	00000064 usb_config_tx
0001b538 g     F .text.itcm	00000234 SPIClass::begin()
000221e4 g     F .text.itcm	00000014 __cxxabiv1::__si_class_type_info::~__si_class_type_info()
00020654  w    F .text.itcm	00000004 usb_seremu_class::available()
0001eba8 g     F .text.itcm	000002f0 set_arm_clock
000170f0 g     F .text.itcm	00000006 ParamManager::getSelParam()
00007860 g     F .text.itcm	000000c0 midifx::MidiFXTranspose::noteInput(MidiNoteGroup)
200097c8 g     O .data	00000004 __brkval
0001c390 g     F .text.itcm	00000002 Adafruit_GFX::startWrite()
000069d8 g     F .text.itcm	00000004 midifx::MidiFXMonophonic::getFXType()
00010360 g     F .text.itcm	000000f0 OmxModeEuclidean::loopUpdate(unsigned long)
20011b4f g     O .bss	00000001 usb_high_speed
00009970 g     F .text.itcm	00000080 OmxDisp::displayMessage(char const*)
000219e4 g     F .text.itcm	00000008 transaction clone for std::bad_exception::what() const
6000182c g     F .text.code	00000004 startup_debug_reset
00001580 g     F .text.itcm	0000002c initializeDisplay()
0001fcc4  w    F .text.itcm	00000004 _isatty
0001ce64 g     F .text.itcm	00000050 Adafruit_EEPROM_I2C::write(unsigned short, unsigned char)
00007038  w    F .text.itcm	00000014 midifx::MidiFXRandomizer::~MidiFXRandomizer()
00013414 g     F .text.itcm	0000007c OmxModeMidiKeyboard::inMidiNoteOn(unsigned char, unsigned char, unsigned char)
0001a248  w    F .text.itcm	00000002 SubModePotConfig::~SubModePotConfig()
000205f0 g     F .text.itcm	00000004 usb_transfer_status
0002b5a4 g     F .text.itcm	000000a0 _malloc_trim_r
2000b99c g     O .bss	0000001c encButton
200119f8 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00018dac g     F .text.itcm	000001bc SubModeMidiFxGroup::updateLEDs()
000298fc g     F .text.itcm	00000010 malloc
0002d930 g     F .text.itcm	000000f0 __lshift
000024fc g     F .text.itcm	000000b8 euclidean::EuclideanSequencer::regeneratePattern()
00029380 g     F .text.itcm	00000000 .hidden __gnu_Unwind_Restore_VFP_D
0001445c  w    F .text.itcm	0000002e OmxModeMidiKeyboard::onNotePostFXForwarder(void*, MidiNoteGroup)
20009780 g     O .data	00000044 midifx::kPatDisp_
00000370  w    F .text.itcm	0000000e OmxScreensaver::~OmxScreensaver()
20009568 g     O .data	00000120 _impure_data
00029820 g     F .text.itcm	00000012 .hidden _Unwind_GetLanguageSpecificData
000077d8 g     F .text.itcm	00000002 midifx::MidiFXTranspose::onEnabled()
000054e4 g     F .text.itcm	00000098 midifx::MidiFXArpeggiator::noteInput(MidiNoteGroup)
0000db50 g     F .text.itcm	00000004 OmxModeChords::SetScale(MusicScales*)
0001734c g     F .text.itcm	0000000a grids::GridsWrapper::stop()
0001eabc g     F .text.itcm	0000008c analogRead
2000a57c  w    O .data	00000016 usb_string_serial_number
00000144  w    F .text.itcm	00000040 OmxModeEuclidean::~OmxModeEuclidean()
20009db0 g     O .data	000002c0 copyPatternBuffer
60001830 g     F .text.code	000000f8 configure_cache
00009428 g     F .text.itcm	00000084 OmxDisp::OmxDisp()
0000a524 g     F .text.itcm	000000f4 OmxDisp::dispCenteredSlots(char const**, unsigned char, unsigned char, bool, bool, bool, char const**, unsigned char)
0001dec4 g     F .text.itcm	00000072 HardwareSerial::peek()
20010a0c g     O .bss	0000000b stepCopyBuffer_
200025a8 g     O .data	00000024 vtable for TwoWire
20003bd4 g     O .data	00000028 kNoteLengths
00007200 g     F .text.itcm	0000003c midifx::MidiFXRandomizer::MidiFXRandomizer()
00028934 g     F .text.itcm	0000001a __cxa_current_exception_type
0000bb00  w    F .text.itcm	00000002 OmxModeInterface::inMidiNoteOn(unsigned char, unsigned char, unsigned char)
20002348 g     O .data	00000058 vtable for Adafruit_SSD1306
0000b348 g     F .text.itcm	0000008c OMXKeypad::OMXKeypad(unsigned long, unsigned long, unsigned char*, unsigned char*, unsigned char*, int, int)
00006738 g     F .text.itcm	00000004 midifx::MidiFXInterface::setAuxDown(bool)
00013e8c g     F .text.itcm	00000268 OmxModeMidiKeyboard::updateLEDs()
00021858 g     F .text.itcm	000000b0 __cxa_type_match
0002e1f4 g     F .text.itcm	00000016 _wcsrtombs_r
0001bbd4 g     F .text.itcm	00000010 Adafruit_SSD1306::~Adafruit_SSD1306()
000005e8 g     F .text.itcm	000000f4 saveHeader
00003ef0 g     F .text.itcm	0000002c midifx::MidiFXArpeggiator::isHoldOn()
000208a8 g     F .text.itcm	000000c4 usb_midi_configure
000135a4 g     F .text.itcm	0000005c OmxModeMidiKeyboard::shouldBlockEncEdit()
0002ac64 g     F .text.itcm	000000f8 memmove
000222fc g     F .text.itcm	00000004 std::type_info::__is_function_p() const
0000bb10  w    F .text.itcm	0000000e SubmodeInterface::onKeyHeldUpdate(OMXKeypadEvent)
000214a4 g     F .text.itcm	00000018 usb_seremu_write
00011d3c g     F .text.itcm	00000064 OmxModeGrids::onModeActivated()
00017b88 g     F .text.itcm	00000028 getSelectedStep()
00006c7c g     F .text.itcm	00000054 midifx::MidiFXMonophonic::MidiFXMonophonic()
200096bc g     O .data	00000038 midifx::kArpModMsg_
2000a2d4 g     O .data	00000005 rowPins
0001ba90 g     F .text.itcm	00000076 Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)
0001f5a8 g     F .text.itcm	00000004 operator new(unsigned int)
0000625c g     F .text.itcm	00000054 midifx::MidiFXHarmonizer::loadFromDisk(int, Storage*)
0001dd90 g     F .text.itcm	00000084 EventResponder::triggerEventNotImmediate()
00007d30 g     F .text.itcm	00000002 midimacro::MidiMacroInterface::~MidiMacroInterface()
200119f4 g     O .bss	00000004 usb_midi_handleSystemReset
0000183c g     F .text.itcm	0000006c MM::sendNoteOff(int, int, int)
00029ea4 g     F .text.itcm	00000040 rand
000191d8 g     F .text.itcm	0000001c SubModeMidiFxGroup::resync()
6003e400 g       .text.csf	00000000 __text_csf_end
00006d88 g     F .text.itcm	0000007e midifx::MidiFXRandomizer::loadFromDisk(int, Storage*)
2000955c g     O .data	00000001 DAC_ADDR
0002ae00 g     F .text.itcm	0000008a strncmp
2000b77c g     O .bss	00000001 __lock___malloc_recursive_mutex
00028bf0 g     F .text.itcm	00000066 .hidden __gnu_Unwind_RaiseException
2000c730 g     O .bss	000000b4 omxDisp
000047fc  w    F .text.itcm	00000074 void std::__insertion_sort<__gnu_cxx::__normal_iterator<midifx::MidiFXArpeggiator::ArpNote*, std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(midifx::MidiFXArpeggiator::ArpNote, midifx::MidiFXArpeggiator::ArpNote)> >(__gnu_cxx::__normal_iterator<midifx::MidiFXArpeggiator::ArpNote*, std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> > >, __gnu_cxx::__normal_iterator<midifx::MidiFXArpeggiator::ArpNote*, std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(midifx::MidiFXArpeggiator::ArpNote, midifx::MidiFXArpeggiator::ArpNote)>)
00006c60  w    F .text.itcm	0000001c midifx::MidiFXMonophonic::~MidiFXMonophonic()
20009704 g     O .data	00000038 midifx::kArpModDisp_
00009280  w    F .text.itcm	00000004 Print::availableForWrite()
00007d3c g     F .text.itcm	00000002 midimacro::MidiMacroM8::loopUpdate()
0000a948 g     F .text.itcm	000001a0 OmxDisp::dispGenericMode2(unsigned char, signed char, signed char, bool)
000027dc g     F .text.itcm	00000006 euclidean::EuclideanSequencer::setVelocity(unsigned char)
000016b8 g     F .text.itcm	00000084 Button::update()
0001b7b4 g     F .text.itcm	000000f2 Adafruit_SSD1306::drawPixel(short, short, unsigned short)
00029388 g     F .text.itcm	00000000 .hidden __gnu_Unwind_Save_VFP_D
00007258 g     F .text.itcm	00000002 midifx::MidiFXScaler::onDisabled()
000079c4 g     F .text.itcm	000001d4 midifx::MidiFXTranspose::onDisplayUpdate(unsigned char)
0001797c g     F .text.itcm	00000008 grids::GridsWrapper::getDensity(unsigned char)
00007370 g     F .text.itcm	000000fc midifx::MidiFXScaler::onDisplayUpdate(unsigned char)
00028cc0 g     F .text.itcm	00000002 .hidden _Unwind_Complete
0001aff8 g     F .text.itcm	00000058 Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)
60001c38 g       .text.code	00000000 __preinit_array_end
0001d608 g     F .text.itcm	0000003e Adafruit_NeoPixel::fill(unsigned long, unsigned short, unsigned short)
0001aefc g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
0002b25c g     F .text.itcm	000000ba strcpy
0001a464 g     F .text.itcm	00000038 SubModePotConfig::SubModePotConfig()
0001ef94 g     F .text.itcm	00000054 digitalWrite
0000725c g     F .text.itcm	00000044 midifx::MidiFXScaler::saveToDisk(int, Storage*)
00028cc4 g     F .text.itcm	0000000c .hidden _Unwind_DeleteException
00012ba0 g     F .text.itcm	00000070 OmxModeGrids::updateLEDsF1()
00004f80 g     F .text.itcm	0000020e midifx::MidiFXArpeggiator::arpNoteOn(MidiNoteGroup)
00019848 g     F .text.itcm	00000006 SubModeMidiFxGroup::setNoteOutputFunc(void (*)(void*, MidiNoteGroup), void*)
20002590  w    O .data	00000018 vtable for U8G2_FOR_ADAFRUIT_GFX
20002ae8 g     O .data	00000064 vtable for midimacro::MidiMacroNorns
20002030 g     O .data	0000000c typeinfo for __cxxabiv1::__class_type_info
0001bb7c g     F .text.itcm	00000058 Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)
000027c4 g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getNoteNumber()
00022690 g     F .text.itcm	0000000c __cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const
2000b92c g     O .bss	00000004 dac
000139cc g     F .text.itcm	000000bc OmxModeMidiKeyboard::onPotChanged(int, int, int, int)
0002064c  w    F .text.itcm	00000004 usb_seremu_class::peek()
200118c4 g     O .bss	00000004 systick_safe_read
00008e00 g     F .text.itcm	0000002c MusicScales::getNoteName(unsigned char, bool)
200096a4 g     O .data	00000004 __cxxabiv1::__unexpected_handler
00005f78 g     F .text.itcm	00000018 midifx::MidiFXChance::loadFromDisk(int, Storage*)
00017024 g     F .text.itcm	00000076 ParamManager::decrementParam()
000090a8 g     F .text.itcm	00000080 PendingNoteOffs::sendOffNow(int, int, bool)
00013e28 g     F .text.itcm	00000064 OmxModeMidiKeyboard::onKeyHeldUpdate(OMXKeypadEvent)
0002aefc g     F .text.itcm	0000000c __cxa_atexit
0001e970 g     F .text.itcm	00000022 String::operator=(char const*)
000028c4 g     F .text.itcm	000000d8 euclidean::EuclideanSequencer::loadSave(euclidean::EuclidSave)
00006e08 g     F .text.itcm	00000128 midifx::MidiFXRandomizer::onEncoderChangedEditParam(Encoder::Update)
00014588  w    F .text.itcm	00000004 OmxModeMidiKeyboard::doNoteOffForwarder(void*, unsigned char)
0001fcac  w    F .text.itcm	00000004 _read
0001e944 g     F .text.itcm	0000002a String::operator=(String&&)
000094c4 g     F .text.itcm	00000018 OmxDisp::clearDisplay()
60001d1c g     O .text.progmem	00000050 TwoWire::i2c4_hardware
000122c8 g     F .text.itcm	000000e8 OmxModeGrids::OmxModeGrids()
000205f4 g     F .text.itcm	00000058 usb_init_serialnumber
00000024 g       *ABS*	00000000 _teensy_model_identifier
20002254 g     O .data	00000018 vtable for EEPROMStorage
00019610 g     F .text.itcm	00000014 SubModeMidiFxGroup::nextArpPattern()
00002bd4 g     F .text.itcm	0000009c midifx::MidiFXArpeggiator::resync()
0002d3c4 g     F .text.itcm	000000d8 __smakebuf_r
00028748 g     F .text.itcm	000000e4 __cxa_call_unexpected
00013da4 g     F .text.itcm	00000084 OmxModeMidiKeyboard::onEncoderButtonDown()
20002044 g     O .data	0000000c typeinfo for __cxxabiv1::__si_class_type_info
00006d08 g     F .text.itcm	00000002 midifx::MidiFXRandomizer::onEnabled()
0001438c g     F .text.itcm	000000d0 OmxModeMidiKeyboard::onNotePostFX(MidiNoteGroup)
0002d560 g     F .text.itcm	00000012 _Bfree
0002b364 g     F .text.itcm	00000002 __retarget_lock_close_recursive
0001448c g     F .text.itcm	00000084 OmxModeMidiKeyboard::doNoteOn(unsigned char)
0002991c g     F .text.itcm	00000560 _malloc_r
0000ee90 g     F .text.itcm	000000ee OmxModeChords::onChordEditOn(unsigned char)
000075b0 g     F .text.itcm	00000034 midifx::MidiFXScaler::loopUpdate()
0001fecc g     F .text.itcm	0000002c usb_stop_sof_interrupts
000170b0 g     F .text.itcm	00000006 ParamManager::getSelPage()
00017c1c g     F .text.itcm	00000060 step_back()
000136a4 g     F .text.itcm	000000a0 OmxModeMidiKeyboard::selectMidiFx(unsigned char, bool)
0001ef40 g     F .text.itcm	00000054 micros
0001fcb8  w    F .text.itcm	0000000a _fstat
20002178 g     O .data	0000000d typeinfo name for std::type_info
00000228  w    F .text.itcm	00000038 OmxModeMidiKeyboard::~OmxModeMidiKeyboard()
00018b24 g     F .text.itcm	0000001e EEPROMStorage::write(unsigned int, unsigned char)
00008ea4 g     F .text.itcm	00000018 MusicScales::getScaleName(unsigned char)
2000b5cc g     O .bss	00000004 midifx::nextArpTriggerTime_
20002b4c g     O .data	00000014 vtable for std::logic_error
00002708 g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getClockAdvanced()
0000757c g     F .text.itcm	00000034 midifx::MidiFXScaler::MidiFXScaler()
20000280 g     O .data	00000028 __mprec_bigtens
00006748 g     F .text.itcm	00000006 midifx::MidiFXInterface::setNoteOutput(void (*)(void*, MidiNoteGroup), void*)
00019b28 g     F .text.itcm	0000012c SubModeMidiFxGroup::onDisplayUpdateMidiFX()
00029efc g     F .text.itcm	000003d8 _realloc_r
0001d768 g     F .text.itcm	00000060 Adafruit_NeoPixel::setBrightness(unsigned char)
0000199c g     F .text.itcm	00000054 MM::sendProgramChange(int, int)
0002a3f8 g     F .text.itcm	00000004 utoa
0000bd58 g     F .text.itcm	000000d0 OmxModeChords::onModeActivated()
200119dc g     O .bss	00000004 usb_midi_handleSongPosition
20003e00 g     O .data	00000004 nummacromodes
2000bdcc g     O .bss	00000800 loopCount
0000bb08  w    F .text.itcm	00000002 SubmodeInterface::onPotChanged(int, int, int, int)
000123fc g     F .text.itcm	00000064 OmxModeGrids::saveActivePattern(unsigned char)
2000b778 g     O .bss	00000001 __lock___atexit_recursive_mutex
0002b850 g     F .text.itcm	0000002a __ascii_mbtowc
0000776c g     F .text.itcm	00000050 midifx::MidiFXScaler::getClone()
00029098  w    F .text.itcm	00000006 .hidden __aeabi_unwind_cpp_pr1
000290a0  w    F .text.itcm	00000006 .hidden __aeabi_unwind_cpp_pr2
000005e4 g     F .text.itcm	00000004 OnNoteOff
000216c4 g     F .text.itcm	00000014 std::bad_alloc::~bad_alloc()
00008ef4 g     F .text.itcm	00000032 PendingNoteHistory::PendingNoteHistory()
60001bf0 g     F .text.code	00000000 _init
0001b354 g     F .text.itcm	000000dc _spi_dma_rxISR1()
0001325c g     F .text.itcm	000000a4 OmxModeGrids::onDisplayUpdate()
000147d4  w    F .text.itcm	00000002 OmxModeInterface::onModeDeactivated()
0001ce38 g     F .text.itcm	0000002c Adafruit_EEPROM_I2C::begin(unsigned char, TwoWire*)
00005f54 g     F .text.itcm	00000006 midifx::MidiFXChance::getColor()
00018fec  w    F .text.itcm	00000034 SubModeMidiFxGroup::~SubModeMidiFxGroup()
00019388 g     F .text.itcm	00000032 SubModeMidiFxGroup::cutMidiFX(unsigned char)
0001c924 g     F .text.itcm	000003d4 Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)
200028a4 g     O .data	000000a0 vtable for midifx::MidiFXMonophonic
20009d5c g     O .data	00000004 clickWindow
60001684 g     F .text.code	00000054 TwoWire::setSDA(unsigned char)
0000893c  w    F .text.itcm	00000014 midimacro::MidiMacroNorns::~MidiMacroNorns()
00001958 g     F .text.itcm	00000044 MM::sendControlChangeHW(int, int, int)
00029090 g     F .text.itcm	00000006 .hidden __aeabi_unwind_cpp_pr0
00002c70 g     F .text.itcm	0000000c midifx::MidiFXArpeggiator::onKeyHeldUpdate(OMXKeypadEvent, unsigned char)
2000a57c g     O .data	00000016 usb_string_serial_number_default
00000068  w    F .text.itcm	00000002 OmxModeInterface::onEncoderButtonUpLong()
00007b98  w    F .text.itcm	00000014 midifx::MidiFXTranspose::~MidiFXTranspose()
0002aef0 g     F .text.itcm	0000000c __locale_mb_cur_max
0001482c g     F .text.itcm	00000154 OmxModeSequencer::onPotChanged(int, int, int, int)
0001db70 g     F .text.itcm	00000004 u8g2_SetFontMode(_u8g2_font_t*, unsigned char)
00006014 g     F .text.itcm	0000005c midifx::MidiFXChance::onEncoderChangedEditParam(Encoder::Update)
0000ae3c g     F .text.itcm	000003b0 OmxDisp::dispKeyboard(int, int*, bool, char const**, unsigned char)
0000e914 g     F .text.itcm	00000058 OmxModeChords::enterChordEditMode()
00007480  w    F .text.itcm	0000001c midifx::MidiFXScaler::~MidiFXScaler()
0001a110 g     F .text.itcm	00000108 SubModeMidiFxGroup::SubModeMidiFxGroup()
000075e4 g     F .text.itcm	00000134 midifx::MidiFXScaler::onEncoderChangedEditParam(Encoder::Update)
0001a250 g     F .text.itcm	0000000a SubModePotConfig::onEncoderChanged(Encoder::Update)
000221f8 g     F .text.itcm	0000001c __cxxabiv1::__si_class_type_info::~__si_class_type_info()
000067f0 g     F .text.itcm	00000024 midifx::MidiFXInterface::setEnabled(bool)
00016afc g     F .text.itcm	00000010 OmxUtil::cvNoteOn(int)
20200000 g     O .bss.dma	00000073 usb_descriptor_buffer
00020660  w    F .text.itcm	00000008 usb_seremu_class::write(unsigned char const*, unsigned int)
00007c1c g     F .text.itcm	0000003c midifx::MidiFXTranspose::MidiFXTranspose()
00015e8c g     F .text.itcm	00000580 OmxModeSequencer::showCurrentStepLEDs(int)
00002100  w    F .text.itcm	00000160 midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::thruFilter(unsigned char)
0001da94 g     F .text.itcm	0000007e u8g2_font_get_glyph_data(_u8g2_font_t*, unsigned short)
0002ab38 g     F .text.itcm	000000cc __swsetup_r
20011b3d g     O .bss	00000001 EventResponder::runningFromYield
00006908 g     F .text.itcm	000000cc midifx::MidiFXInterface::sendNoteOff(midifx::MidiNoteGroupCache)
00008804 g     F .text.itcm	00000074 midimacro::MidiMacroNorns::onEncoderChangedEditParam(Encoder::Update)
00017e60 g     F .text.itcm	00000040 new_step_ahead(int)
00016af0 g     F .text.itcm	00000008 OmxUtil::stopClocks()
0001fcc8  w    F .text.itcm	00000006 _lseek
0002aa6c g     F .text.itcm	000000aa _fwrite_r
00006694 g     F .text.itcm	0000004c midifx::MidiFXHarmonizer::MidiFXHarmonizer()
00006d00 g     F .text.itcm	00000008 midifx::MidiFXRandomizer::getColor()
00016b14 g     F .text.itcm	000000d4 OmxUtil::midiNoteOn(MusicScales*, int, int, int)
00019850 g     F .text.itcm	00000030 SubModeMidiFxGroup::onPendingNoteOff(int, int)
000133bc g     F .text.itcm	00000034 OmxModeMidiKeyboard::loopUpdate(unsigned long)
00001144 g     F .text.itcm	000002b8 setup
20002158 g     O .data	0000000d typeinfo name for std::bad_alloc
00009800 g     F .text.itcm	0000002c OmxDisp::clearLegends()
0000262c g     F .text.itcm	00000014 euclidean::EuclideanSequencer::stop()
00005f2c  w    F .text.itcm	00000002 midifx::MidiFXInterface::onModeChanged()
00008358 g     F .text.itcm	00000244 midimacro::MidiMacroM8::drawLEDs()
60001020 g     O .text.headers	0000000c BootData
00008ce0 g     F .text.itcm	0000007c MusicScales::getGroup16Note(unsigned char, signed char)
0000c260 g     F .text.itcm	0000009c OmxModeChords::selectMidiFx(unsigned char, bool)
0002205c g     F .text.itcm	00000008 __cxxabiv1::__unexpected(void (*)())
200118bc g     O .bss	00000004 systick_cycle_count
0002d574 g     F .text.itcm	000000a4 __multadd
0002057c g     F .text.itcm	00000030 usb_prepare_transfer
000026f8 g     F .text.itcm	00000004 euclidean::EuclideanSequencer::setMute(bool)
0000bb04  w    F .text.itcm	00000002 OmxModeInterface::inMidiNoteOff(unsigned char, unsigned char, unsigned char)
00005f4c g     F .text.itcm	00000008 midifx::MidiFXChance::getDispName()
000297e8 g     F .text.itcm	0000002a .hidden __gnu_unwind_frame
000077c8 g     F .text.itcm	00000008 midifx::MidiFXTranspose::getDispName()
0001799c g     F .text.itcm	00000008 grids::GridsWrapper::getY(unsigned char)
200022c8 g     O .data	00000024 vtable for HardwareSerial
0001b158 g     F .text.itcm	00000070 Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)
0000723c g     F .text.itcm	00000004 midifx::MidiFXScaler::getFXType()
00016568  w    F .text.itcm	00000002 OmxModeInterface::InitSetup()
0001a25c g     F .text.itcm	00000038 SubModePotConfig::onEnabled()
000307b8 g       .text.itcm	00000000 _etext
0001eb48 g     F .text.itcm	00000060 analogReadRes
0002e038 g     F .text.itcm	00000024 _close_r
0001e89c g     F .text.itcm	00000030 String::String(unsigned char)
0000c568 g     F .text.itcm	00000038 OmxModeChords::enableSubmode(SubmodeInterface*)
00000ac0 g     F .text.itcm	000002d0 loadPatterns
000185a0 g     F .text.itcm	0000015c doStepS1()
00003ee0 g     F .text.itcm	0000000e midifx::MidiFXArpeggiator::isOn()
00000070  w    F .text.itcm	00000002 OmxModeSequencer::~OmxModeSequencer()
00017794 g     F .text.itcm	000000a2 grids::GridsWrapper::saveSnapShot(unsigned char)
0001e37c g     F .text.itcm	00000164 HardwareSerial::IRQHandler()
200119e0 g     O .bss	00000004 usb_midi_handleSongSelect
00007c5c  w    F .text.itcm	00000002 midimacro::MidiMacroInterface::onDisabled()
00008328  w    F .text.itcm	00000014 midimacro::MidiMacroM8::~MidiMacroM8()
00001688 g     F .text.itcm	0000002e Button::Button(unsigned long)
0000c8d0 g     F .text.itcm	0000007e OmxModeChords::getParams()
0002065c  w    F .text.itcm	00000004 usb_seremu_class::availableForWrite()
0002e288 g     F .text.itcm	00000040 __assert_func
0001d38c g     F .text.itcm	0000007e Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, short, unsigned short)
00013300 g     F .text.itcm	00000008 OmxModeGrids::SetScale(MusicScales*)
0001d1d8 g     F .text.itcm	00000014 Adafruit_Keypad::available()
600016d8 g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
2000a178 g     O .data	0000001e keys
0001f5b4 g     F .text.itcm	00000062 ultoa
0001dc28 g     F .text.itcm	00000004 u8g2_SetForegroundColor(_u8g2_font_t*, unsigned short)
20001d50 g     O .data	00000050 SPIClass::spiclass_lpspi1_hardware
0000b94c g     F .text.itcm	00000044 OmxLeds::setAllLEDS(int, int, int)
0000299c g     F .text.itcm	00000124 euclidean::EuclideanSequencer::playNote()
0001a98c  w    F .text.itcm	0000000c TwoWire::available()
0001de5c g     F .text.itcm	00000020 systick_isr
20000568 g     O .data	00000004 LED_PIN
000100c8  w    F .text.itcm	000000a0 OmxModeEuclidean::onNotePostFXForwarder(void*, MidiNoteGroup)
00002820 g     F .text.itcm	000000a2 euclidean::EuclideanSequencer::getSave()
00016ed4 g     F .text.itcm	00000058 ParamManager::incrementPage()
00015040 g     F .text.itcm	000000b8 OmxModeSequencer::OmxModeSequencer()
00021908 g     F .text.itcm	00000064 __cxa_begin_cleanup
0000bb0c  w    F .text.itcm	00000004 SubmodeInterface::shouldBlockEncEdit()
00006c4c  w    F .text.itcm	00000014 midifx::MidiFXMonophonic::~MidiFXMonophonic()
60001ab4 g     F .text.code	000000e8 usb_init
00016b0c g     F .text.itcm	00000008 OmxUtil::cvNoteOff()
00007c90 g     F .text.itcm	00000014 midimacro::MidiMacroInterface::onEncoderButtonDown()
200119f0 g     O .bss	00000004 usb_midi_handleSysExPartial
00017984 g     F .text.itcm	00000008 grids::GridsWrapper::setX(unsigned char, unsigned char)
200024d8 g     O .data	0000005c vtable for SubModeMidiFxGroup
2000a2dc g     O .data	0000008c scaleNames
00006728 g     F .text.itcm	0000000e midifx::MidiFXInterface::getEncoderSelect()
2000c5cc g     O .bss	00000134 midiSettings
60002398 g     O .text.progmem	00000073 usb_config_descriptor_12
00011da0 g     F .text.itcm	0000002c OmxModeGrids::onModeDeactivated()
000165a0 g     F .text.itcm	0000008c OmxScreensaver::onPotChanged(int, int, int, int)
00006150  w    F .text.itcm	00000014 midifx::MidiFXChance::~MidiFXChance()
0001b09c g     F .text.itcm	00000054 Adafruit_I2CDevice::detected()
0000b930 g     F .text.itcm	0000001c OmxLeds::getBlinkPattern(unsigned char)
0001c394 g     F .text.itcm	0000000e Adafruit_GFX::writePixel(short, short, unsigned short)
0000a298 g     F .text.itcm	00000044 OmxDisp::drawStartupScreen()
20000000 g       .data	00000000 _sdata
0000173c  w    F .text.itcm	00000002 midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::~MidiInterface()
200096a0 g     O .data	00000004 __cxxabiv1::__terminate_handler
200118c0 g     O .bss	00000004 systick_millis_count
000294e0 g     F .text.itcm	00000022 .hidden ___Unwind_Backtrace
200024b4  w    O .data	00000024 vtable for usb_seremu_class
aaaabfff g       *ABS*	00000000 _flexram_bank_config
000214c0 g     F .text.itcm	00000058 usb_seremu_flush_output
0001ee98 g     F .text.itcm	000000a8 delay
00018c2c g     F .text.itcm	00000014 SubmodeInterface::onEncoderButtonDown()
200097c4 g     O .data	00000004 __atexit_recursive_mutex
0002b51c g     F .text.itcm	00000088 __register_exitproc
0002b644 g     F .text.itcm	0000020c _free_r
2000a800 g     O .data	000002c0 _VectorsRam
00013380 g     F .text.itcm	0000003c OmxModeMidiKeyboard::onModeDeactivated()
200021f8 g     O .data	0000005c vtable for OmxModeGrids
00006f30 g     F .text.itcm	00000108 midifx::MidiFXRandomizer::onDisplayUpdate(unsigned char)
00022038 g     F .text.itcm	00000010 __cxxabiv1::__terminate(void (*)())
000179e8 g     F .text.itcm	00000006 grids::GridsWrapper::setSwing(unsigned char)
000180ac g     F .text.itcm	00000078 seqNoteOff(int, int)
0001a9d4 g     F .text.itcm	0000002a TwoWire::write(unsigned char)
2000a158 g     O .data	00000020 kVoicingNames
00019558 g     F .text.itcm	00000068 SubModeMidiFxGroup::getArp(bool)
2000e9cc g     O .bss	000000f4 omxModeMidi
0001c4dc g     F .text.itcm	000000a4 Adafruit_GFX::drawLine(short, short, short, short, unsigned short)
0002126c g     F .text.itcm	00000024 usb_seremu_available
00008ca4 g     F .text.itcm	00000004 MusicScales::getNumScales()
200094b8 g     O .data	00000084 usb_descriptor_list
00013600 g     F .text.itcm	000000a4 OmxModeMidiKeyboard::OmxModeMidiKeyboard()
00012c10 g     F .text.itcm	000001e0 OmxModeGrids::updateLEDsChannelView()
0001d1ec g     F .text.itcm	000000b0 Adafruit_Keypad::read()
200119cc g     O .bss	00000004 usb_midi_handleNoteOn
00018008 g     F .text.itcm	000000a4 seqNoteOn(int, int, int)
200119fc g     O .bss	00000004 usb_midi_handleTuneRequest
0000a114 g     F .text.itcm	00000070 OmxDisp::dispPageIndicators2(unsigned char, signed char)
0000ed1c g     F .text.itcm	0000004c OmxModeChords::splitNoteOn(unsigned char)
00006b34 g     F .text.itcm	00000064 midifx::MidiFXMonophonic::onEncoderChangedEditParam(Encoder::Update)
200119ec g     O .bss	00000004 usb_midi_handleSysExComplete
0001e934 g     F .text.itcm	0000000e String::operator=(String const&)
0001fe94 g     F .text.itcm	00000038 usb_start_sof_interrupts
0001b1c8 g     F .text.itcm	00000056 Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)
000216bc g     F .text.itcm	00000008 std::bad_alloc::what() const
00002814 g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getLastSeqPos()
20000000 g     O .data	00000280 endpoint_queue_head
0000d818 g     F .text.itcm	00000338 OmxModeChords::setupPageLegends()
000094ac g     F .text.itcm	00000018 OmxDisp::setup()
00008b14 g     F .text.itcm	0000005c midimacro::MidiMacroNorns::MidiMacroNorns()
0001aaa8 g     F .text.itcm	00000108 TwoWire::force_clock()
0002272c g     F .text.itcm	0000002a __cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const
00019674 g     F .text.itcm	000001d4 SubModeMidiFxGroup::onKeyUpdate(OMXKeypadEvent)
00007d3c g     F .text.itcm	00000002 midimacro::MidiMacroM8::onDisabled()
0000a8b4 g     F .text.itcm	00000094 OmxDisp::dispGridBoxes()
0000861c g     F .text.itcm	000001e8 midimacro::MidiMacroNorns::onKeyUpdate(OMXKeypadEvent)
000179a4 g     F .text.itcm	00000044 grids::GridsWrapper::setResolution(unsigned char)
00005c50 g     F .text.itcm	000002bc midifx::MidiFXArpeggiator::onEncoderChangedEditParam(Encoder::Update)
20011b51 g     O .bss	00000001 usb_midi_msg_channel
0001d358 g     F .text.itcm	00000034 Adafruit_NeoPixel::updateLength(unsigned short)
000226b0 g     F .text.itcm	0000001c __cxxabiv1::__class_type_info::~__class_type_info()
2000b9b8 g     O .bss	00000001 encoderConfig
2000bbc8 g     O .bss	00000200 lastNote
2000b7b0 g     O .bss	00000004 __malloc_max_total_mem
0001645c g     F .text.itcm	00000108 OmxModeSequencer::initPatterns()
00004068 g     F .text.itcm	000000f4 midifx::MidiFXArpeggiator::loadFromDisk(int, Storage*)
00005f5c g     F .text.itcm	00000002 midifx::MidiFXChance::loopUpdate()
20002764 g     O .data	000000a0 vtable for midifx::MidiFXTranspose
00008ebc g     F .text.itcm	00000010 MusicScales::getScalePattern(unsigned char)
0001c800 g     F .text.itcm	00000030 Adafruit_GFX::Adafruit_GFX(short, short)
20009d4c g     O .data	0000000c __sglue
0002e104 g     F .text.itcm	000000a4 fcvtbuf
0001e7fc g     F .text.itcm	0000000e String::~String()
0002243c g     F .text.itcm	00000040 std::logic_error::~logic_error()
00001740 g     F .text.itcm	0000004c MM::begin()
0001d314 g     F .text.itcm	0000001e Adafruit_NeoPixel::~Adafruit_NeoPixel()
2000a20c g     O .data	00000030 noteNames
000042b0 g     F .text.itcm	0000007a midifx::MidiFXArpeggiator::findIndexOfNextNotePos()
00020a1c g     F .text.itcm	000000c0 usb_midi_send_sysex_buffer_has_term
20002c8c g     O .data	00000101 _ctype_
0002dd54 g     F .text.itcm	00000130 __sflush_r
20002130 g     O .data	00000011 typeinfo name for std::length_error
000188dc g     F .text.itcm	00000028 seqStop()
0001ceb4 g     F .text.itcm	0000002c Adafruit_EEPROM_I2C::read(unsigned short)
00018b54 g     F .text.itcm	00000074 Storage::initStorage()
00019638 g     F .text.itcm	00000026 SubModeMidiFxGroup::gotoArpParams()
000195c0 g     F .text.itcm	00000014 SubModeMidiFxGroup::toggleArp()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
60001824  w    F .text.code	00000002 startup_middle_hook
00019fc8 g     F .text.itcm	00000074 SubModeMidiFxGroup::onEncoderChanged(Encoder::Update)
0001afb8 g     F .text.itcm	00000006 Adafruit_MCP4725::Adafruit_MCP4725()
2000b5a4 g     O .bss	00000004 EventResponder::lastInterrupt
00016a50 g     F .text.itcm	00000090 OmxUtil::restartClocks()
2000aae0 g     O .bss	00000020 endpoint0_transfer_data
00018850 g     F .text.itcm	0000000c allNotesOff()
0002a5b0 g     F .text.itcm	0000000c __sfp_lock_release
000077d0 g     F .text.itcm	00000008 midifx::MidiFXTranspose::getColor()
000169e0 g     F .text.itcm	0000006c OmxUtil::resetClocks()
0002247c g     F .text.itcm	00000040 std::length_error::~length_error()
0000db54 g     F .text.itcm	00000098 OmxModeChords::pasteSelectedChordTo(unsigned char)
00006780 g     F .text.itcm	0000003c midifx::MidiFXInterface::sendNoteOff(MidiNoteGroup)
2000a592 g     O .data	00000001 yield_active_check_flags
00005f1c  w    F .text.itcm	0000000c midifx::MidiFXInterface::onKeyHeldUpdate(OMXKeypadEvent, unsigned char)
000027fc g     F .text.itcm	00000006 euclidean::EuclideanSequencer::setNoteLength(unsigned char)
000219e0 g     F .text.itcm	00000002 std::bad_exception::~bad_exception()
00022250 g     F .text.itcm	0000007a __cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const
0002ab18 g     F .text.itcm	00000020 fwrite
0000a184 g     F .text.itcm	000000a0 OmxDisp::dispGenericModeLabel(char const*, unsigned char, signed char)
60001928 g     F .text.code	0000005c usb_pll_start
00018c18  w    F .text.itcm	00000002 SubmodeInterface::onClockTick()
00005f10  w    F .text.itcm	0000000c midifx::MidiFXInterface::onKeyUpdate(OMXKeypadEvent, unsigned char)
200062b4 g     O .data	00002076 u8g2_font_cu12_h_symbols
00021ba4 g     F .text.itcm	00000494 __gxx_personality_v0
0001f0d8 g     F .text.itcm	00000048 eeprom_initialize
000298d0 g     F .text.itcm	0000002c itoa
00000d90 g     F .text.itcm	0000006c loadFromStorage
00021478 g     F .text.itcm	0000002c usb_seremu_putchar
00006204 g     F .text.itcm	00000008 midifx::MidiFXHarmonizer::getColor()
0001bb08 g     F .text.itcm	00000074 Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)
0002a568 g     F .text.itcm	0000003c __sinit
0001c580 g     F .text.itcm	00000094 Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
200118ac g     O .bss	00000010 sysSettings
200002a8 g     O .data	000000c8 __mprec_tens
00029498 g     F .text.itcm	00000022 .hidden _Unwind_Resume_or_Rethrow
00009e18 g     F .text.itcm	000002fc OmxDisp::dispValues16(signed char*, unsigned char, signed char, signed char, bool, unsigned char, unsigned char, signed char, bool, bool, char const**, unsigned char)
00002bc4 g     F .text.itcm	00000004 midifx::MidiFXArpeggiator::getColor()
0001bb7c g     F .text.itcm	00000058 Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)
0002162c  w    F .text.itcm	00000002 serialEvent()
00003040 g     F .text.itcm	00000220 midifx::MidiFXArpeggiator::updateLEDs(unsigned char)
00017938 g     F .text.itcm	00000010 grids::GridsWrapper::getChannelTriggered(unsigned char)
0001abb0 g     F .text.itcm	00000040 TwoWire::wait_idle()
0001b22c  w    F .text.itcm	00000110 SPIClass::beginTransaction(SPISettings)
2000993c g     O .data	00000408 __malloc_av_
000099f0 g     F .text.itcm	00000014 OmxDisp::displayMessage(String)
200119c0 g     O .bss	00000004 usb_midi_handleContinue
0001f984 g     F .text.itcm	0000007a flexpwm_init
60002394 g     O .text.progmem	00000004 string0
00005f40 g     F .text.itcm	00000004 midifx::MidiFXChance::getFXType()
00018c24 g     F .text.itcm	00000004 SubmodeInterface::isEnabled()
000222f8 g     F .text.itcm	00000002 std::type_info::~type_info()
0001a314 g     F .text.itcm	00000058 SubModePotConfig::updateLEDs()
0001c3b8 g     F .text.itcm	00000012 Adafruit_GFX::writeFastHLine(short, short, short, unsigned short)
00030288 g     F .text.itcm	000000aa __fputwc
0001d7c8 g     F .text.itcm	0000000a Adafruit_NeoPixel::clear()
00021228 g     F .text.itcm	00000044 usb_seremu_peekchar
20002168 g     O .data	0000000d typeinfo name for std::exception
0001c3a4 g     F .text.itcm	00000012 Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)
00008950  w    F .text.itcm	0000001c midimacro::MidiMacroNorns::~MidiMacroNorns()
00008e2c g     F .text.itcm	00000078 MusicScales::getFullNoteName(unsigned char)
200119d4 g     O .bss	00000004 usb_midi_handleProgramChange
000041d8 g     F .text.itcm	00000050 midifx::MidiFXArpeggiator::startArp()
2000b7b4 g     O .bss	00000004 __malloc_top_pad
000077d8 g     F .text.itcm	00000002 midifx::MidiFXTranspose::loopUpdate()
000290a8 g     F .text.itcm	000002ae .hidden _Unwind_VRS_Pop
00008ef4 g     F .text.itcm	00000032 PendingNoteHistory::PendingNoteHistory()
0002ae8c g     F .text.itcm	00000064 strncpy
00009c28 g     F .text.itcm	000001f0 OmxDisp::dispLabelParams(signed char, bool, char const**, unsigned char, bool)
0001658c g     F .text.itcm	00000006 OmxScreensaver::onEncoderChanged(Encoder::Update)
0000c5a0 g     F .text.itcm	00000048 OmxModeChords::isSubmodeEnabled()
00021290 g     F .text.itcm	00000064 tx_queue_transfer
0001a248  w    F .text.itcm	00000002 SubModePotConfig::~SubModePotConfig()
20010a18 g     O .bss	00000004 storage
000199e4 g     F .text.itcm	00000144 SubModeMidiFxGroup::setupPageLegends()
2000b8f0 g     O .bss	00000004 __stdio_exit_handler
2000aac0 g     O .bss	00000020 endpoint0_transfer_ack
0001b0f0 g     F .text.itcm	00000068 Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)
0001c3e4 g     F .text.itcm	0000001e Adafruit_GFX::fillScreen(unsigned short)
00002798 g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getEvents()
2000599c g     O .data	00000915 u8g2_font_7x14B_tf
00029398 g     F .text.itcm	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00019ce4 g     F .text.itcm	0000005c SubModeMidiFxGroup::saveToDisk(int, Storage*)
0001c830 g     F .text.itcm	000000f4 Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)
0000ba0c g     F .text.itcm	00000084 OmxLeds::initSetup()
0000281c g     F .text.itcm	00000004 euclidean::EuclideanSequencer::getPattern()
200022ec g     O .data	0000005c vtable for OmxScreensaver
0002254c g     F .text.itcm	00000080 std::logic_error::logic_error(char const*)
0002b360 g     F .text.itcm	00000002 __retarget_lock_init_recursive
0001e874 g     F .text.itcm	00000026 String::String(char const*)
00018d24 g     F .text.itcm	0000001c SubModeMidiFxGroup::onClockTick()
0001f120 g     F .text.itcm	00000074 eeprom_read_byte
60001984 g     F .text.code	00000130 tempmon_init
20002b74 g     O .data	00000014 vtable for std::bad_exception
00013a88 g     F .text.itcm	0000031c OmxModeMidiKeyboard::onEncoderChanged(Encoder::Update)
0001b33c  w    F .text.itcm	00000016 EventResponder::triggerEvent(int, void*)
00005f34  w    F .text.itcm	00000002 midifx::MidiFXInterface::resync()
00017914 g     F .text.itcm	00000024 grids::GridsWrapper::getSeqPos()
00018b10  w    F .text.itcm	00000004 FRAMStorage::isEeprom()
0001faf8 g     F .text.itcm	00000180 unused_interrupt_vector
200118ec g     O .bss	00000080 tempStrings
0001458c g     F .text.itcm	00000248 OmxModeMidiKeyboard::onKeyUpdate(OMXKeypadEvent)
00021608 g     F .text.itcm	00000024 rtc_get
20001da0 g     O .data	00000050 SPIClass::spiclass_lpspi3_hardware
00007038  w    F .text.itcm	00000014 midifx::MidiFXRandomizer::~MidiFXRandomizer()
00001a94  w    F .text.itcm	0000006e midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::send(midi::MidiType, unsigned char, unsigned char, unsigned char)
2000b784 g     O .bss	00000028 __malloc_current_mallinfo
000069f4 g     F .text.itcm	00000002 midifx::MidiFXMonophonic::loopUpdate()
00001688 g     F .text.itcm	0000002e Button::Button(unsigned long)
2000a1c4 g     O .data	00000004 mfxOffMsg
0001a56c g     F .text.itcm	00000054 SubModePotConfig::onDisplayUpdate()
2000b7b8 g     O .bss	00000138 __sf
0000ff9c g     F .text.itcm	0000002c OmxModeEuclidean::onEncoderButtonDownLong()
00005f44 g     F .text.itcm	00000008 midifx::MidiFXChance::getName()
0001e6b8 g     F .text.itcm	00000028 Print::printNumber(unsigned long, unsigned char, unsigned char)
2000eac0 g     O .bss	00000078 omxModeSeq
00017974 g     F .text.itcm	00000008 grids::GridsWrapper::setDensity(unsigned char, unsigned char)
0000264c g     F .text.itcm	000000ac euclidean::EuclideanSequencer::onNoteOn(unsigned char, unsigned char, unsigned char, float, bool, bool, unsigned long)
000025b4 g     F .text.itcm	0000005c euclidean::EuclideanSequencer::EuclideanSequencer()
00018ad4 g     F .text.itcm	00000020 pastePattern(int)
0001c6e8 g     F .text.itcm	00000118 Adafruit_GFX::writeLine(short, short, short, short, unsigned short)
00006164  w    F .text.itcm	0000001c midifx::MidiFXChance::~MidiFXChance()
2000b5e8 g     O .bss	00000190 __atexit0
00004f38 g     F .text.itcm	00000048 midifx::MidiFXArpeggiator::nextArpPattern()
000085ec  w    F .text.itcm	00000004 midimacro::MidiMacroNorns::consumesDisplay()
000147d8  w    F .text.itcm	00000002 OmxModeInterface::onClockTick()
00002784 g     F .text.itcm	00000014 euclidean::EuclideanSequencer::setEvents(unsigned char)
00007c60 g     F .text.itcm	00000004 midimacro::MidiMacroInterface::getEnabled()
00006070 g     F .text.itcm	000000e0 midifx::MidiFXChance::onDisplayUpdate(unsigned char)
00011d08 g     F .text.itcm	00000012 OmxModeGrids::shouldBlockEncEdit()
00029390 g     F .text.itcm	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
000307bc g       .ARM.exidx	00000000 __exidx_end
20011b28 g     O .bss	00000004 usb_timer0_callback
000085f4 g     F .text.itcm	00000014 midimacro::MidiMacroNorns::getName()
00010d70 g     F .text.itcm	00000320 OmxModeEuclidean::OmxModeEuclidean()
00011ac0 g     F .text.itcm	00000008 OmxModeEuclidean::SetScale(MusicScales*)
0001ea84 g     F .text.itcm	00000036 String::getBytes(unsigned char*, unsigned int, unsigned int) const
00016ae8 g     F .text.itcm	00000008 OmxUtil::resumeClocks()
00004750  w    F .text.itcm	000000ac void std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> >::_M_realloc_insert<midifx::MidiFXArpeggiator::ArpNote const&>(__gnu_cxx::__normal_iterator<midifx::MidiFXArpeggiator::ArpNote*, std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> > >, midifx::MidiFXArpeggiator::ArpNote const&)
60002360  w    O .text.progmem	00000001 _serialEventUSB2_default
00007b98  w    F .text.itcm	00000014 midifx::MidiFXTranspose::~MidiFXTranspose()
000192c8 g     F .text.itcm	0000002c SubModeMidiFxGroup::copyMidiFX(unsigned char)
00021630 g     F .text.itcm	0000000a __aeabi_atexit
00016418 g     F .text.itcm	00000044 OmxModeSequencer::loopUpdate(unsigned long)
20002074 g     O .data	0000000c typeinfo for std::bad_alloc
0001a638 g     F .text.itcm	0000004c SysEx::sendCurrentState()
0000277c g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getRotation()
0002247c g     F .text.itcm	00000040 std::length_error::~length_error()
0001e89c g     F .text.itcm	00000030 String::String(unsigned char)
20011a00 g     O .bss	00000004 usb_midi_handleVelocityChange
00004940  w    F .text.itcm	0000013a void std::__introsort_loop<__gnu_cxx::__normal_iterator<midifx::MidiFXArpeggiator::ArpNote*, std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> > >, int, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(midifx::MidiFXArpeggiator::ArpNote, midifx::MidiFXArpeggiator::ArpNote)> >(__gnu_cxx::__normal_iterator<midifx::MidiFXArpeggiator::ArpNote*, std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> > >, __gnu_cxx::__normal_iterator<midifx::MidiFXArpeggiator::ArpNote*, std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> > >, int, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(midifx::MidiFXArpeggiator::ArpNote, midifx::MidiFXArpeggiator::ArpNote)>)
2000f228 g     O .bss	0000000c scaleConfig
20002458 g     O .data	0000005c vtable for SubModePotConfig
00009a34 g     F .text.itcm	0000015c OmxDisp::dispChordBalance()
20201880 g       .bss.dma	00000000 _heap_start
0001c484 g     F .text.itcm	00000058 Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)
0002aa24 g     F .text.itcm	00000046 _fwalk_sglue
00005f28  w    F .text.itcm	00000002 midifx::MidiFXInterface::updateLEDs(unsigned char)
000195d4 g     F .text.itcm	00000014 SubModeMidiFxGroup::toggleArpHold()
2000a56c g     O .data	0000000e usb_string_product_name
00003e74 g     F .text.itcm	0000006c midifx::MidiFXArpeggiator::nextOctRange()
0000cd98  w    F .text.itcm	0000002e OmxModeChords::onNotePostFXForwarder(void*, MidiNoteGroup)
2000a1d4 g     O .data	0000001c modes
00018b4c g     F .text.itcm	00000008 FRAMStorage::read(unsigned int)
0002a620 g     F .text.itcm	00000086 _fputs_r
00000088  w    F .text.itcm	0000004c OmxModeChords::~OmxModeChords()
0000a224 g     F .text.itcm	00000074 OmxDisp::testdrawrect()
60002363 g     O .text.progmem	00000001 _serialEvent1_default
00020650  w    F .text.itcm	00000004 usb_seremu_class::read()
00016594 g     F .text.itcm	0000000c OmxScreensaver::onKeyUpdate(OMXKeypadEvent)
0002dbb8 g     F .text.itcm	000000d4 __d2b
200118cc g     O .bss	00000010 tempFullNoteName
00004580  w    F .text.itcm	00000100 void std::vector<midifx::MidiFXArpeggiator::PendingArpNote, std::allocator<midifx::MidiFXArpeggiator::PendingArpNote> >::_M_realloc_insert<midifx::MidiFXArpeggiator::PendingArpNote const&>(__gnu_cxx::__normal_iterator<midifx::MidiFXArpeggiator::PendingArpNote*, std::vector<midifx::MidiFXArpeggiator::PendingArpNote, std::allocator<midifx::MidiFXArpeggiator::PendingArpNote> > >, midifx::MidiFXArpeggiator::PendingArpNote const&)
0001767c g     F .text.itcm	000000cc grids::GridsWrapper::getChannelLEDS(unsigned char)
2000a118 g     O .data	00000020 kChordTypeDisp
0000ff78  w    F .text.itcm	00000024 OmxModeEuclidean::onPendingNoteOffForwarder(void*, int, int)
000190a8 g     F .text.itcm	0000006c SubModeMidiFxGroup::onEnabled()
0000620c g     F .text.itcm	00000002 midifx::MidiFXHarmonizer::onDisabled()
2000b930 g     O .bss	0000006c display
00001a44 g     F .text.itcm	00000020 MM::continueClock()
00018bec g     F .text.itcm	00000024 Storage::writeArray(unsigned int, unsigned char*, int)
00013314 g     F .text.itcm	0000003e OmxModeGrids::setPattern(unsigned char, grids::SnapShotSettings)
0000c358 g     F .text.itcm	00000038 OmxModeChords::loopUpdate(unsigned long)
00005f0c  w    F .text.itcm	00000004 midifx::MidiFXInterface::usesKeys()
0001db14 g     F .text.itcm	0000005a u8g2_GetGlyphWidth(_u8g2_font_t*, unsigned short)
000195fc g     F .text.itcm	00000014 SubModeMidiFxGroup::isArpHoldOn()
00002644 g     F .text.itcm	00000008 euclidean::EuclideanSequencer::setNoteOutputFunc(void (*)(void*, unsigned char, MidiNoteGroup), void*, unsigned char)
000294bc g     F .text.itcm	00000022 .hidden _Unwind_ForcedUnwind
200119d8 g     O .bss	00000004 usb_midi_handleRealTimeSystem
2000968c g     O .data	00000004 F_CPU_ACTUAL
00011090 g     F .text.itcm	000000ec OmxModeEuclidean::setParamMode(unsigned char)
0000746c  w    F .text.itcm	00000014 midifx::MidiFXScaler::~MidiFXScaler()
0001e4e0 g     F .text.itcm	0000000c IRQHandler_Serial1
6000237c g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200097cc g     O .data	00000000 .hidden __dso_handle
0002d6b8 g     F .text.itcm	0000005c __i2b
000067d0 g     F .text.itcm	00000020 midifx::MidiFXInterface::onEncoderChangedSelectParam(Encoder::Update)
0001fcb0  w    F .text.itcm	00000006 _close
2000a1a8 g     O .data	0000001c mdivs
000063d0 g     F .text.itcm	000000a8 midifx::MidiFXHarmonizer::onEncoderChangedEditParam(Encoder::Update)
0002a5a4 g     F .text.itcm	0000000c __sfp_lock_acquire
0000671c  w    F .text.itcm	00000002 midifx::MidiFXInterface::onEnabled()
20002a84 g     O .data	00000064 vtable for midimacro::MidiMacroM8
00013984 g     F .text.itcm	00000048 OmxModeMidiKeyboard::isSubmodeEnabled()
0000428c g     F .text.itcm	00000024 midifx::MidiFXArpeggiator::onClockTick()
00007c68 g     F .text.itcm	00000006 midimacro::MidiMacroInterface::setDoNoteOn(void (*)(void*, unsigned char), void*)
000098a8 g     F .text.itcm	00000008 OmxDisp::setDirty()
2000056c g     O .data	00000004 PPQ
0001bc78 g     F .text.itcm	000000a2 Adafruit_SSD1306::invertDisplay(bool)
00000408 g     F .text.itcm	0000011c readPotentimeters
00007248 g     F .text.itcm	00000008 midifx::MidiFXScaler::getDispName()
0001885c g     F .text.itcm	0000003c transposeSeq(int, int)
2000b028 g     O .bss	00000004 V_scale
0000ea1c g     F .text.itcm	000000c0 OmxModeChords::loadFromDisk(int, Storage*)
0001fa00 g     F .text.itcm	000000f4 pwm_init
0002a35c g     F .text.itcm	0000009c __utoa
00017358 g     F .text.itcm	00000006 grids::GridsWrapper::setNoteOutputFunc(void (*)(void*, unsigned char, MidiNoteGroup), void*)
00021a04 g     F .text.itcm	00000008 __cxa_get_globals
00009128 g     F .text.itcm	00000008 PendingNoteOffs::allOff()
2000a3a8 g     O .data	00000090 trigConditions
00000588 g     F .text.itcm	0000005c handleNoteOff
20009d44 g     O .data	00000004 __malloc_sbrk_base
00006d08 g     F .text.itcm	00000002 midifx::MidiFXRandomizer::onDisabled()
000069d4 g     F .text.itcm	00000002 midifx::MidiFXInterface::~MidiFXInterface()
0000fbac g     F .text.itcm	000003a4 OmxModeChords::onKeyUpdate(OMXKeypadEvent)
0001ce30 g     F .text.itcm	00000008 Adafruit_EEPROM_I2C::Adafruit_EEPROM_I2C()
0002defc g     F .text.itcm	0000003e __swrite
20000500 g     O .data	00000004 CC_OM2
2000afc8 g     O .bss	00000060 Serial1
0001d8bc g     F .text.itcm	0000004e u8g2_draw_hv_line(_u8g2_font_t*, short, short, short, unsigned char, unsigned short)
0001a464 g     F .text.itcm	00000038 SubModePotConfig::SubModePotConfig()
60001b9c g     F .text.code	00000054 _reboot_Teensyduino_
0001e8cc g     F .text.itcm	0000002e String::String(int, unsigned char)
00001a24 g     F .text.itcm	00000020 MM::startClock()
00007ce8 g     F .text.itcm	00000048 midimacro::MidiMacroInterface::onEncoderChanged(Encoder::Update)
0002dc8c g     F .text.itcm	000000c6 _fclose_r
00000388 g     F .text.itcm	00000080 changeOmxMode
6000170c g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
0001c800 g     F .text.itcm	00000030 Adafruit_GFX::Adafruit_GFX(short, short)
0001dfcc g     F .text.itcm	0000001a HardwareSerial::flush()
0002f104 g     F .text.itcm	00000100 __ssprint_r
0000c61c g     F .text.itcm	00000060 OmxModeChords::onKeyHeldUpdate(OMXKeypadEvent)
2000f16c g     O .bss	00000060 potSettings
0001d334 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
20011b2c g     O .bss	00000004 usb_timer1_callback
2000b5b0 g     O .bss	0000001c HardwareSerial::s_serials_with_serial_events
00016d84 g     F .text.itcm	0000008c OmxUtil::midiNoteOff2(int, int)
00005240 g     F .text.itcm	000001ac midifx::MidiFXArpeggiator::processNoteInput(MidiNoteGroup)
00015e60 g     F .text.itcm	0000002c OmxModeSequencer::onEncoderChanged(Encoder::Update)
00018d40 g     F .text.itcm	00000010 SubModeMidiFxGroup::getEncoderSelect()
0002d514 g     F .text.itcm	0000004c _Balloc
20011b3e g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
00009a04 g     F .text.itcm	00000030 OmxDisp::displayMessagef(char const*, ...)
2000a270 g     O .data	00000064 pots
00017964 g     F .text.itcm	00000008 grids::GridsWrapper::setNoteLength(unsigned char, unsigned char)
000027e4 g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getVelocity()
0001e7c0 g     F .text.itcm	0000003a String::String(String const&)
000186fc g     F .text.itcm	00000154 doStepS2()
60001c38 g       .text.code	00000000 __preinit_array_start
00014e78 g     F .text.itcm	0000004c OmxModeSequencer::onModeActivated()
0000432c g     F .text.itcm	00000254 midifx::MidiFXArpeggiator::applyModPattern(short)
20000560 g     O .data	00000004 LED_BRIGHTNESS
00019960  w    F .text.itcm	0000002e SubModeMidiFxGroup::noteFuncForwarder(void*, MidiNoteGroup)
2000b7ac g     O .bss	00000004 __malloc_max_sbrked_mem
0000178c g     F .text.itcm	0000006c MM::sendNoteOn(int, int, int)
00007c84 g     F .text.itcm	0000000c midimacro::MidiMacroInterface::DoNoteOff(unsigned char)
00003a44  w    F .text.itcm	00000074 midifx::MidiFXArpeggiator::~MidiFXArpeggiator()
00019020 g     F .text.itcm	00000028 SubModeMidiFxGroup::getArpIndex()
20002534 g     O .data	0000005c vtable for OmxModeMidiKeyboard
0001fcd0  w    F .text.itcm	00000004 __cxa_pure_virtual
0001aed8 g     F .text.itcm	0000000c lpi2c1_isr()
0000b42c  w    F .text.itcm	000000d4 void std::vector<OMXKeypad::keystate*, std::allocator<OMXKeypad::keystate*> >::_M_realloc_insert<OMXKeypad::keystate* const&>(__gnu_cxx::__normal_iterator<OMXKeypad::keystate**, std::vector<OMXKeypad::keystate*, std::allocator<OMXKeypad::keystate*> > >, OMXKeypad::keystate* const&)
000225e0  w    F .text.itcm	00000078 std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)
6003d800 g     O .text.csf	00000c00 hab_csf
0001acec g     F .text.itcm	00000140 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
00019324 g     F .text.itcm	00000064 SubModeMidiFxGroup::reconnectInputsOutputs()
000094e8 g     F .text.itcm	00000108 OmxDisp::u8g2centerText(char const*, short, short, unsigned short, unsigned short)
000193bc g     F .text.itcm	0000006c SubModeMidiFxGroup::pasteMidiFX(unsigned char)
00004228 g     F .text.itcm	00000064 midifx::MidiFXArpeggiator::onSelected()
20009690 g     O .data	00000010 Serial
0000bb20  w    F .text.itcm	00000004 SubmodeInterface::usesPots()
00028628 g     F .text.itcm	000000c4 __cxa_demangle
00029450 g     F .text.itcm	00000022 .hidden _Unwind_RaiseException
0001a9b8  w    F .text.itcm	00000018 TwoWire::peek()
0002df3c g     F .text.itcm	00000020 __sseek
00016fc4 g     F .text.itcm	00000060 ParamManager::decrementPage()
00000074  w    F .text.itcm	00000002 OmxScreensaver::~OmxScreensaver()
0001c3cc g     F .text.itcm	00000018 Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)
00029840 g     F .text.itcm	00000018 calloc
0002f0dc g     F .text.itcm	00000028 fiprintf
60001ccc g     O .text.progmem	00000050 TwoWire::i2c3_hardware
00007200 g     F .text.itcm	0000003c midifx::MidiFXRandomizer::MidiFXRandomizer()
0000683c g     F .text.itcm	00000064 midifx::MidiFXInterface::onEncoderChanged(Encoder::Update)
00007c64 g     F .text.itcm	00000004 midimacro::MidiMacroInterface::setScale(MusicScales*)
0001db74 g     F .text.itcm	00000020 u8g2_DrawGlyph(_u8g2_font_t*, short, short, unsigned short)
2000aac0 g       .bss	00000000 _sbss
00007ca4 g     F .text.itcm	00000020 midimacro::MidiMacroInterface::onEncoderChangedSelectParam(Encoder::Update)
0002d49c g     F .text.itcm	00000076 _putc_r
00009428 g     F .text.itcm	00000084 OmxDisp::OmxDisp()
00007d3c g     F .text.itcm	00000002 midimacro::MidiMacroM8::onEnabled()
00000380 g     F .text.itcm	00000006 _write
0001de58 g     F .text.itcm	00000004 pendablesrvreq_isr
00009130 g     F .text.itcm	00000006 PendingNoteOffs::setNoteOffFunction(void (*)(void*, int, int), void*)
00006664  w    F .text.itcm	00000014 midifx::MidiFXHarmonizer::~MidiFXHarmonizer()
0000b998 g     F .text.itcm	00000004 OmxLeds::isDirty()
00012a94 g     F .text.itcm	0000010c OmxModeGrids::updateLEDsFNone()
000069f4 g     F .text.itcm	00000002 midifx::MidiFXMonophonic::onEnabled()
0001e994 g     F .text.itcm	0000007e String::append(char const*, unsigned int)
2000b5d0  w    O .bss	00000010 std::string::_Rep::_S_empty_rep_storage
00002bb0 g     F .text.itcm	00000004 midifx::MidiFXArpeggiator::getFXType()
0000b718 g     F .text.itcm	00000048 OmxLeds::getKeyColor(MusicScales*, int)
000053ec g     F .text.itcm	000000f6 midifx::MidiFXArpeggiator::trackNoteInput(MidiNoteGroup)
0001cef4 g     F .text.itcm	0000004a Adafruit_FRAM_I2C::getDeviceID(unsigned short*, unsigned short*)
0001bbe4 g     F .text.itcm	00000092 Adafruit_SSD1306::ssd1306_command1(unsigned char)
2000b5e4 g     O .bss	00000004 __atexit
00006a10 g     F .text.itcm	00000018 midifx::MidiFXMonophonic::loadFromDisk(int, Storage*)
000293a0 g     F .text.itcm	00000000 .hidden __gnu_Unwind_Restore_WMMXD
00018c28 g     F .text.itcm	00000004 SubmodeInterface::getEncoderSelect()
00007068 g     F .text.itcm	0000004c midifx::MidiFXRandomizer::getClone()
00014980 g     F .text.itcm	000004f8 OmxModeSequencer::onDisplayUpdate()
00004870  w    F .text.itcm	000000d0 void std::__adjust_heap<__gnu_cxx::__normal_iterator<midifx::MidiFXArpeggiator::ArpNote*, std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> > >, int, midifx::MidiFXArpeggiator::ArpNote, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(midifx::MidiFXArpeggiator::ArpNote, midifx::MidiFXArpeggiator::ArpNote)> >(__gnu_cxx::__normal_iterator<midifx::MidiFXArpeggiator::ArpNote*, std::vector<midifx::MidiFXArpeggiator::ArpNote, std::allocator<midifx::MidiFXArpeggiator::ArpNote> > >, int, int, midifx::MidiFXArpeggiator::ArpNote, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(midifx::MidiFXArpeggiator::ArpNote, midifx::MidiFXArpeggiator::ArpNote)>)
2000226c g     O .data	0000005c vtable for OmxModeChords
0002254c g     F .text.itcm	00000080 std::logic_error::logic_error(char const*)
20002b88 g     O .data	00000014 vtable for std::bad_alloc
2000a558 g     O .data	00000012 usb_string_manufacturer_name
2000eb5c g     O .bss	00000084 pendingNoteHistory
00003b34 g     F .text.itcm	00000220 midifx::MidiFXArpeggiator::MidiFXArpeggiator()
00011ac8 g     F .text.itcm	00000050 OmxModeEuclidean::saveToDisk(int, Storage*)
00000070  w    F .text.itcm	00000002 OmxModeSequencer::~OmxModeSequencer()
000061f4 g     F .text.itcm	00000008 midifx::MidiFXHarmonizer::getName()
00018b1c g     F .text.itcm	00000006 EEPROMStorage::read(unsigned int)
20003d94 g     O .data	0000006c notes
0000085c g     F .text.itcm	00000264 savePatterns
20002804 g     O .data	000000a0 vtable for midifx::MidiFXHarmonizer
000217d4 g     F .text.itcm	0000002e __cxa_allocate_exception
000294e0 g     F .text.itcm	00000022 .hidden _Unwind_Backtrace
0002a730 g     F .text.itcm	000002f4 __sfvwrite_r
0001fcd8 g     F .text.itcm	00000004 Panic_Temp_isr
0000be80 g     F .text.itcm	000003e0 OmxModeChords::OmxModeChords()
60001764 g     F .text.code	00000068 TwoWire::begin()
0001d40c g     F .text.itcm	000001f0 Adafruit_NeoPixel::show()
0001123c g     F .text.itcm	000000ac OmxModeEuclidean::loadActivePattern(unsigned char)
00009288  w    F .text.itcm	00000022 OmxDisp::~OmxDisp()
000133f0  w    F .text.itcm	00000024 OmxModeMidiKeyboard::onPendingNoteOffForwarder(void*, int, int)
0000bba4  w    F .text.itcm	00000024 OmxModeChords::onPendingNoteOffForwarder(void*, int, int)
0001330c g     F .text.itcm	00000006 OmxModeGrids::getPattern(unsigned char)
00017a58 g     F .text.itcm	00000120 defaultSequencer()
0001e69c g     F .text.itcm	0000001c Print::println()
0001de7c g     F .text.itcm	00000020 HardwareSerial::availableForWrite()
00019660 g     F .text.itcm	00000014 SubModeMidiFxGroup::getArpOctaveRange()
0000173c  w    F .text.itcm	00000002 midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::~MidiInterface()
00018c1c  w    F .text.itcm	00000002 SubmodeInterface::onEnabled()
00006678  w    F .text.itcm	0000001c midifx::MidiFXHarmonizer::~MidiFXHarmonizer()
2000dc3c g     O .bss	00000abc omxModeEuclid
000127dc g     F .text.itcm	000002b8 OmxModeGrids::onKeyUpdate(OMXKeypadEvent)
0001e874 g     F .text.itcm	00000026 String::String(char const*)
000118d0 g     F .text.itcm	000001f0 OmxModeEuclidean::onDisplayUpdate()
00029428 g     F .text.itcm	00000000 .hidden __gnu_Unwind_Restore_WMMXC
0000673c g     F .text.itcm	0000000a midifx::MidiFXInterface::processNoteOn(unsigned char, MidiNoteGroup)
0001d014 g     F .text.itcm	0000016c Adafruit_Keypad::tick()
00000318  w    F .text.itcm	00000058 OmxModeChords::~OmxModeChords()
00005f5c g     F .text.itcm	00000002 midifx::MidiFXChance::onDisabled()
00010168 g     F .text.itcm	00000070 OmxModeEuclidean::onModeDeactivated()
0000b9b8 g     F .text.itcm	00000054 OmxLeds::rainbow(int)
0002f27c g     F .text.itcm	00000f8c _vfiprintf_r
00002734 g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getClockDivMult()
0000e9b8 g     F .text.itcm	00000064 OmxModeChords::saveToDisk(int, Storage*)
0001cf40 g     F .text.itcm	0000008c Adafruit_FRAM_I2C::begin(unsigned char, TwoWire*)
00007240 g     F .text.itcm	00000008 midifx::MidiFXScaler::getName()
00029814 g     F .text.itcm	0000000a .hidden _Unwind_GetRegionStart
00006a28 g     F .text.itcm	0000010c midifx::MidiFXMonophonic::noteInput(MidiNoteGroup)
200119b4 g     O .bss	00000004 usb_midi_handleActiveSensing
000001dc g     F .text.itcm	0000004c OnControlChange
00007718 g     F .text.itcm	00000054 midifx::MidiFXScaler::loadFromDisk(int, Storage*)
20011b30 g     O .bss	00000002 AMAX
0001a5c0 g     F .text.itcm	00000078 SysEx::loadGlobals()
0002a5bc g     F .text.itcm	00000064 fputc
20002088 g     O .data	00000008 typeinfo for std::type_info
000205ac g     F .text.itcm	00000028 usb_transmit
2000a19c g     O .data	0000000c macromodes
00018910 g     F .text.itcm	000000b4 rotatePattern(int, int)
60001828  w    F .text.code	00000002 startup_late_hook
2000f258 g     O .bss	00000038 seqConfig
0000620c g     F .text.itcm	00000002 midifx::MidiFXHarmonizer::loopUpdate()
000294bc g     F .text.itcm	00000022 .hidden ___Unwind_ForcedUnwind
000018ec g     F .text.itcm	0000006c MM::sendControlChange(int, int, int)
00006cf0 g     F .text.itcm	00000008 midifx::MidiFXRandomizer::getName()
000085f0 g     F .text.itcm	00000002 midimacro::MidiMacroNorns::loopUpdate()
000066e0 g     F .text.itcm	0000003c midifx::MidiFXHarmonizer::getClone()
0001ae2c g     F .text.itcm	000000ac TwoWire::isr()
00017948 g     F .text.itcm	0000000c grids::GridsWrapper::setMidiChan(unsigned char, unsigned char)
0001a788 g     F .text.itcm	000001e8 ResponsiveAnalogRead::getResponsiveValue(int)
0002df64 g     F .text.itcm	0000001a __ascii_wctomb
20003bc0 g     O .data	00000004 gridw
0000781c g     F .text.itcm	00000044 midifx::MidiFXTranspose::loadFromDisk(int, Storage*)
00002640 g     F .text.itcm	00000004 euclidean::EuclideanSequencer::isRunning()
000061c0 g     F .text.itcm	00000030 midifx::MidiFXChance::MidiFXChance()
000092ac  w    F .text.itcm	00000096 U8G2_FOR_ADAFRUIT_GFX::write(unsigned char)
00018b44 g     F .text.itcm	00000008 FRAMStorage::write(unsigned int, unsigned char)
0001a3b0 g     F .text.itcm	000000a4 SubModePotConfig::onEncoderChangedEditParam(Encoder::Update)
20011b4e g     O .bss	00000001 usb_configuration
2000aed8 g     O .bss	00000050 SPI
00014ec4 g     F .text.itcm	00000120 OmxModeSequencer::onKeyHeldUpdate(OMXKeypadEvent)
2000955d g     O .data	00000001 DEFAULT_MODE
000170f8 g     F .text.itcm	0000001e ParamManager::setSelParam(signed char)
000204b4 g     F .text.itcm	00000064 usb_config_rx
00006750 g     F .text.itcm	00000030 midifx::MidiFXInterface::sendNoteOut(MidiNoteGroup)
00016780 g     F .text.itcm	00000014 OmxScreensaver::updateLEDs()
2000a1f0 g     O .data	0000001c multValues
00016880 g     F .text.itcm	00000044 OmxUtil::sendPots(int, int)
200096f4 g     O .data	00000010 midifx::kResetDisp_
00017b78 g     F .text.itcm	0000000e serializedPatternSize(bool)
000018a8 g     F .text.itcm	00000044 MM::sendNoteOffHW(int, int, int)
0001e8cc g     F .text.itcm	0000002e String::String(int, unsigned char)
00001a64 g     F .text.itcm	00000020 MM::stopClock()
2000a1c8 g     O .data	0000000c midiMacroConfig
0001f5ac g     F .text.itcm	00000004 operator delete(void*)
00002260 g     F .text.itcm	00000068 MM::midiRead()
0002983a g     F .text.itcm	00000006 .hidden _Unwind_GetTextRelBase
000216d8 g     F .text.itcm	0000001c std::bad_alloc::~bad_alloc()
2000b780 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000b694 g     F .text.itcm	00000084 OmxLeds::updateBlinkStates()
2000aec8 g     O .bss	00000010 omxUtil
00022048 g     F .text.itcm	00000014 std::terminate()
00011c70 g     F .text.itcm	00000006 OmxModeGrids::InitSetup()
00008f28 g     F .text.itcm	00000026 PendingNoteHistory::clearIfChanged(unsigned long)
00008b14 g     F .text.itcm	0000005c midimacro::MidiMacroNorns::MidiMacroNorns()
00013600 g     F .text.itcm	000000a4 OmxModeMidiKeyboard::OmxModeMidiKeyboard()
2000af28 g     O .bss	00000050 SPI1
00018b08  w    F .text.itcm	00000006 EEPROMStorage::capacity()
0001e5e8 g     F .text.itcm	00000050 Print::write(unsigned char const*, unsigned int)
2000af78 g     O .bss	00000050 SPI2
0001f618 g     F .text.itcm	0000001e ltoa
00019234 g     F .text.itcm	00000094 SubModeMidiFxGroup::onEncoderButtonDown()
000027bc g     F .text.itcm	00000006 euclidean::EuclideanSequencer::setNoteNumber(unsigned char)
000015e8 g     F .text.itcm	000000a0 Encoder::update()
00003fb0 g     F .text.itcm	0000003c midifx::MidiFXArpeggiator::toggleArp()
0001c408 g     F .text.itcm	00000022 Adafruit_GFX::setRotation(unsigned char)
0001e2a0 g     F .text.itcm	000000d8 HardwareSerial::write9bit(unsigned long)
20009560 g     O .data	00000001 kNumArpRates
0001a970 g     F .text.itcm	0000001c ResponsiveAnalogRead::update(int)
0000be28 g     F .text.itcm	00000058 OmxModeChords::shouldBlockEncEdit()
00011dcc g     F .text.itcm	0000036c OmxModeGrids::onEncoderChanged(Encoder::Update)
000106a4 g     F .text.itcm	00000320 OmxModeEuclidean::updateLEDs()
0000f468 g     F .text.itcm	000002a4 OmxModeChords::onEncoderChanged(Encoder::Update)
20003e10 g     O .data	0000001c pin_to_channel
0001ea5c g     F .text.itcm	00000028 operator+(StringSumHelper const&, int)
00019990 g     F .text.itcm	00000052 SubModeMidiFxGroup::noteInput(MidiNoteGroup)
000109c4 g     F .text.itcm	000003ac OmxModeEuclidean::onEncoderChanged(Encoder::Update)
00018c40 g     F .text.itcm	00000020 SubmodeInterface::onEncoderChangedSelectParam(Encoder::Update)
0001f194 g     F .text.itcm	000000ec eepromemu_flash_write
0002df5c g     F .text.itcm	00000008 __sclose
00017324 g     F .text.itcm	00000026 grids::GridsWrapper::start()
00018ab0 g     F .text.itcm	00000024 copyPattern(int)
200026c4 g     O .data	000000a0 vtable for midifx::MidiFXScaler
0001a998  w    F .text.itcm	0000001e TwoWire::read()
000221e4 g     F .text.itcm	00000014 __cxxabiv1::__si_class_type_info::~__si_class_type_info()
0000b760 g     F .text.itcm	000001c8 OmxLeds::drawMidiLeds(MusicScales*)
0001117c g     F .text.itcm	000000c0 OmxModeEuclidean::saveActivePattern(unsigned char, bool)
20008bfc g     O .data	000008bc u8g2_font_tenfatguys_tf
000069f8 g     F .text.itcm	00000016 midifx::MidiFXMonophonic::saveToDisk(int, Storage*)
00002bd0 g     F .text.itcm	00000002 midifx::MidiFXArpeggiator::onDeselected()
000068a0 g     F .text.itcm	00000068 midifx::MidiFXInterface::processNoteOff(MidiNoteGroup)
00029450 g     F .text.itcm	00000022 .hidden ___Unwind_RaiseException
000027a0 g     F .text.itcm	00000014 euclidean::EuclideanSequencer::setSteps(unsigned char)
00019170 g     F .text.itcm	00000068 SubModeMidiFxGroup::loopUpdate()
00019c54 g     F .text.itcm	00000090 SubModeMidiFxGroup::onDisplayUpdate()
20011b56 g     O .bss	00000001 usb_seremu_online
00019428 g     F .text.itcm	0000012e SubModeMidiFxGroup::changeMidiFXType(unsigned char, unsigned char, bool)
200096a8 g     O .data	00000014 midifx::kModeDisp_
0001afb8 g     F .text.itcm	00000006 Adafruit_MCP4725::Adafruit_MCP4725()
000122c8 g     F .text.itcm	000000e8 OmxModeGrids::OmxModeGrids()
0001a684 g     F .text.itcm	0000009c SysEx::processIncomingSysex(unsigned char const*, unsigned int)
0002882c g     F .text.itcm	0000007c __cxa_begin_catch
0001595c g     F .text.itcm	00000504 OmxModeSequencer::onEncoderChangedStep(Encoder::Update)
0001de9c g     F .text.itcm	00000026 HardwareSerial::available()
0000b92c g     F .text.itcm	00000004 OmxLeds::getSlowBlinkState()
20009561 g     O .data	00000001 kNumNoteLengths
00008c8c g     F .text.itcm	00000016 MusicScales::calculateScaleIfModified(unsigned char, unsigned char)
00012460 g     F .text.itcm	00000078 OmxModeGrids::loadActivePattern(unsigned char)
0000ed68 g     F .text.itcm	00000126 OmxModeChords::onChordOn(unsigned char)
0001022c g     F .text.itcm	00000084 OmxModeEuclidean::onEncoderButtonDown()
00001a04 g     F .text.itcm	00000020 MM::sendClock()
200097d0 g     O .data	0000016c __global_locale
000140f4 g     F .text.itcm	00000298 OmxModeMidiKeyboard::onDisplayUpdate()
0000cb78 g     F .text.itcm	00000124 OmxModeChords::doNoteOff(int, unsigned char, unsigned char)
0001e684 g     F .text.itcm	00000016 Print::print(long)
00002700 g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getTriggered()
00001ca8  w    F .text.itcm	00000458 midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::parse()
00017838 g     F .text.itcm	000000da grids::GridsWrapper::loadSnapShot(unsigned char)
20002944 g     O .data	000000a0 vtable for midifx::MidiFXRandomizer
200021a0 g     O .data	00000058 vtable for Adafruit_GFX
00002d84 g     F .text.itcm	00000012 midifx::MidiFXArpeggiator::usesKeys()
00007cc4 g     F .text.itcm	00000024 midimacro::MidiMacroInterface::setEnabled(bool)
0002a6a8 g     F .text.itcm	00000018 fputs
000069dc g     F .text.itcm	00000008 midifx::MidiFXMonophonic::getName()
00011c80 g     F .text.itcm	0000005c OmxModeGrids::loopUpdate(unsigned long)
0000896c g     F .text.itcm	000001a8 midimacro::MidiMacroNorns::drawLEDs()
00006180 g     F .text.itcm	00000040 midifx::MidiFXChance::getClone()
000170b8 g     F .text.itcm	0000000e ParamManager::setSelPage(signed char)
0000893c  w    F .text.itcm	00000014 midimacro::MidiMacroNorns::~MidiMacroNorns()
00028728 g     F .text.itcm	0000001e __cxa_call_terminate
0002b368 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
00029358 g     F .text.itcm	00000018 .hidden restore_core_regs
00008ca8 g     F .text.itcm	00000038 MusicScales::isNoteInScale(signed char)
0001337c g     F .text.itcm	00000002 OmxModeMidiKeyboard::onEncoderButtonUp()
2000b02c g     O .bss	00000140 Wire
60001c38 g       .text.code	00000000 __init_array_start
00021804 g     F .text.itcm	00000020 __cxa_free_exception
200119d0 g     O .bss	00000004 usb_midi_handlePitchChange
00029858 g     F .text.itcm	00000078 _calloc_r
0002a6c0 g     F .text.itcm	00000070 vsnprintf
00016c88 g     F .text.itcm	000000fc OmxUtil::midiNoteOn2(MusicScales*, int, int, int)
000171bc g     F .text.itcm	00000168 grids::GridsWrapper::GridsWrapper()
0001bbd4 g     F .text.itcm	00000010 Adafruit_SSD1306::~Adafruit_SSD1306()
0001cee0 g     F .text.itcm	00000012 Adafruit_FRAM_I2C::Adafruit_FRAM_I2C()
60002361  w    O .text.progmem	00000001 _serialEventUSB1_default
000002d0  w    F .text.itcm	00000048 OmxModeEuclidean::~OmxModeEuclidean()
00016564 g     F .text.itcm	00000004 OmxModeSequencer::SetScale(MusicScales*)
0001696c g     F .text.itcm	00000070 OmxUtil::advanceSteps(unsigned long)
0000b928 g     F .text.itcm	00000004 OmxLeds::getBlinkState()
00011378 g     F .text.itcm	00000400 OmxModeEuclidean::onKeyUpdate(OMXKeypadEvent)
0001afc0 g     F .text.itcm	00000038 Adafruit_MCP4725::begin(unsigned char, TwoWire*)
00016570  w    F .text.itcm	00000002 OmxModeInterface::loopUpdate(unsigned long)
00029358 g     F .text.itcm	00000018 .hidden __restore_core_regs
2000a138 g     O .data	00000020 kUIModeDisp
0002955c g     F .text.itcm	0000028a .hidden __gnu_unwind_execute
00007c58  w    F .text.itcm	00000002 midimacro::MidiMacroInterface::onEnabled()
00017954 g     F .text.itcm	00000010 grids::GridsWrapper::getMidiChan(unsigned char)
00003ab8 g     F .text.itcm	0000007c midifx::MidiFXArpeggiator::onModeChanged()
000006dc g     F .text.itcm	00000180 loadHeader
0001dcb8 g     F .text.itcm	000000d6 U8G2_FOR_ADAFRUIT_GFX::getUTF8Width(char const*)
0001aa3c  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
2000aac0 g     O .data	00000000 .hidden __TMC_END__
0000749c g     F .text.itcm	000000e0 midifx::MidiFXScaler::calculateRemap()
00020bec g     F .text.itcm	000000a8 usb_midi_read_message
00000270  w    F .text.itcm	00000060 OmxModeGrids::~OmxModeGrids()
0001c404 g     F .text.itcm	00000002 Adafruit_GFX::invertDisplay(bool)
000070b4 g     F .text.itcm	0000014c midifx::MidiFXRandomizer::noteInput(MidiNoteGroup)
20002624 g     O .data	000000a0 vtable for midifx::MidiFXChance
00002bd0 g     F .text.itcm	00000002 midifx::MidiFXArpeggiator::onDisabled()
2000a26c g     O .data	00000004 potMaxVal
00002710 g     F .text.itcm	00000024 euclidean::EuclideanSequencer::setClockDivMult(unsigned char)
00028c58 g     F .text.itcm	00000010 .hidden __gnu_Unwind_ForcedUnwind
0001db94 g     F .text.itcm	00000094 u8g2_SetFont(_u8g2_font_t*, unsigned char const*)
20002e44 g     O .data	00000014 analogPins
00029474 g     F .text.itcm	00000022 .hidden ___Unwind_Resume
0002d714 g     F .text.itcm	0000015c __multiply
0002d870 g     F .text.itcm	000000c0 __pow5mult
20003bbc g     O .data	00000004 gridh
2000b5a8 g     O .bss	00000004 EventResponder::firstInterrupt
0001d004 g     F .text.itcm	00000010 Adafruit_Keypad::~Adafruit_Keypad()
0001f280 g     F .text.itcm	000000b8 eepromemu_flash_erase_sector
0001709c g     F .text.itcm	00000014 ParamManager::changeParam(signed char)
000095f0 g     F .text.itcm	0000015c OmxDisp::drawLoading()
00015040 g     F .text.itcm	000000b8 OmxModeSequencer::OmxModeSequencer()
00006664  w    F .text.itcm	00000014 midifx::MidiFXHarmonizer::~MidiFXHarmonizer()
00000007 g       *ABS*	00000000 _itcm_block_count
00011cf8 g     F .text.itcm	00000010 OmxModeGrids::onEncoderButtonDownLong()
0001a03c  w    F .text.itcm	000000d4 void std::vector<midifx::MidiFXInterface*, std::allocator<midifx::MidiFXInterface*> >::_M_realloc_insert<midifx::MidiFXInterface*>(__gnu_cxx::__normal_iterator<midifx::MidiFXInterface**, std::vector<midifx::MidiFXInterface*, std::allocator<midifx::MidiFXInterface*> > >, midifx::MidiFXInterface*&&)
0000859c g     F .text.itcm	0000004c midimacro::MidiMacroM8::MidiMacroM8()
00022064 g     F .text.itcm	00000014 std::unexpected()
200119bc g     O .bss	00000004 usb_midi_handleClock
00029e7c g     F .text.itcm	0000000c __malloc_lock
0000c5e8 g     F .text.itcm	00000034 OmxModeChords::onEncoderButtonDown()
20000564 g     O .data	00000004 LED_COUNT
0000dd28 g     F .text.itcm	0000041c OmxModeChords::onDisplayUpdate()
000189c4 g     F .text.itcm	0000004c resetPatternDefaults(int)
20003938 g     O .data	00000280 digital_pin_to_info_PGM
0001f338 g     F .text.itcm	0000012c eeprom_write_byte
00000104  w    F .text.itcm	00000040 OMXKeypad::~OMXKeypad()
0000c2fc g     F .text.itcm	0000005c OmxModeChords::updateFuncKeyMode()
00007d88 g     F .text.itcm	00000508 midimacro::MidiMacroM8::onKeyUpdate(OMXKeypadEvent)
00001b04  w    F .text.itcm	000001a4 midi::MidiInterface<midi::SerialMIDI<HardwareSerial, midi::DefaultSerialSettings>, midi::DefaultSettings, midi::DefaultPlatform>::launchCallback()
0001efe8 g     F .text.itcm	00000024 digitalRead
00007d34  w    F .text.itcm	00000004 midimacro::MidiMacroM8::consumesPots()
000061f0 g     F .text.itcm	00000004 midifx::MidiFXHarmonizer::getFXType()
0000e144 g     F .text.itcm	00000180 OmxModeChords::constructChordBasic(unsigned char)
20011b54 g     O .bss	00000001 usb_midi_msg_type
6000248c g       *ABS*	00000000 _stextload
0002af08 g     F .text.itcm	0000000a fcvtf
0001681c g     F .text.itcm	00000006 OmxScreensaver::shouldShowScreenSaver()
00019d84  w    F .text.itcm	000000d4 void std::vector<midifx::MidiFXInterface*, std::allocator<midifx::MidiFXInterface*> >::_M_realloc_insert<midifx::MidiFXInterface* const&>(__gnu_cxx::__normal_iterator<midifx::MidiFXInterface**, std::vector<midifx::MidiFXInterface*, std::allocator<midifx::MidiFXInterface*> > >, midifx::MidiFXInterface* const&)
00016ae0 g     F .text.itcm	00000008 OmxUtil::startClocks()
00022438 g     F .text.itcm	00000004 std::runtime_error::what() const
0002990c g     F .text.itcm	00000010 free
00007d30 g     F .text.itcm	00000002 midimacro::MidiMacroInterface::~MidiMacroInterface()
0000974c g     F .text.itcm	00000060 OmxDisp::dispValBox(int, short, bool)
00017bb0 g     F .text.itcm	0000006c step_ahead()
0001c42c g     F .text.itcm	00000058 Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)
00009284  w    F .text.itcm	00000002 Print::flush()
00013308 g     F .text.itcm	00000004 OmxModeGrids::serializedPatternSize(bool)
2000973c g     O .data	00000044 midifx::kPatMsg_
00018c20  w    F .text.itcm	00000002 SubmodeInterface::onDisabled()
00019624 g     F .text.itcm	00000014 SubModeMidiFxGroup::nextArpOctRange()
000224bc g     F .text.itcm	00000048 std::logic_error::~logic_error()
00006cf8 g     F .text.itcm	00000008 midifx::MidiFXRandomizer::getDispName()
000219dc g     F .text.itcm	00000002 std::exception::~exception()
00007258 g     F .text.itcm	00000002 midifx::MidiFXScaler::onEnabled()
0002d658 g     F .text.itcm	00000060 __lo0bits
00000184  w    F .text.itcm	00000058 OmxModeGrids::~OmxModeGrids()
20003e2c g     O .data	00000004 potCount
0001c1b0 g     F .text.itcm	0000001e Adafruit_SSD1306::clearDisplay()
0001335c g     F .text.itcm	00000020 OmxModeMidiKeyboard::onClockTick()
0000bafc  w    F .text.itcm	00000002 OmxModeInterface::onEncoderButtonUp()
000000d4  w    F .text.itcm	00000030 OmxModeMidiKeyboard::~OmxModeMidiKeyboard()
00022438 g     F .text.itcm	00000004 std::logic_error::what() const
6000240c g     O .text.progmem	00000073 usb_config_descriptor_480
00017ea0 g     F .text.itcm	00000048 evaluate_AB(int, int)
000039dc  w    F .text.itcm	00000068 midifx::MidiFXArpeggiator::~MidiFXArpeggiator()
000216c4 g     F .text.itcm	00000014 std::bad_alloc::~bad_alloc()
0000415c g     F .text.itcm	0000007c midifx::MidiFXArpeggiator::doPendingStart()
0001e8fc g     F .text.itcm	00000038 String::String(float, unsigned char)
2000b16c g     O .bss	00000140 Wire1
000027f4 g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getSwing()
000101d8 g     F .text.itcm	00000054 OmxModeEuclidean::shouldBlockEncEdit()
0002de84 g     F .text.itcm	00000054 _fflush_r
00021518  w    F .text.itcm	000000f0 yield
00016824 g     F .text.itcm	0000000c OmxScreensaver::resetCounter()
00006724 g     F .text.itcm	00000004 midifx::MidiFXInterface::getEnabled()
00007c1c g     F .text.itcm	0000003c midifx::MidiFXTranspose::MidiFXTranspose()
00022174 g     F .text.itcm	0000006e __cxa_rethrow
0000757c g     F .text.itcm	00000034 midifx::MidiFXScaler::MidiFXScaler()
0001e7fc g     F .text.itcm	0000000e String::~String()
2000b2ac g     O .bss	00000140 Wire2
0001e6ec g     F .text.itcm	0000006c random(unsigned long)
0002b370 g     F .text.itcm	00000000 memchr
20009688 g     O .data	00000004 F_BUS_ACTUAL
000077c0 g     F .text.itcm	00000008 midifx::MidiFXTranspose::getName()
00028c68 g     F .text.itcm	00000044 .hidden __gnu_Unwind_Resume
00016be8 g     F .text.itcm	00000018 OmxUtil::midiNoteOn(int, int, int)
200020d4 g     O .data	00000024 typeinfo name for __cxxabiv1::__foreign_exception
60002364 g     O .text.progmem	00000018 usb_string_product_name_default
00000144  w    F .text.itcm	00000040 OmxModeEuclidean::~OmxModeEuclidean()
00000078 g     F .text.itcm	00000010 OnSysEx
00000524 g     F .text.itcm	00000060 handleNoteOn
0001656c  w    F .text.itcm	00000002 OmxModeInterface::onModeActivated()
0001f5b0 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0002ded8 g     F .text.itcm	00000022 __sread
00018904 g     F .text.itcm	0000000a getPatternPage(int)
0001dc2c g     F .text.itcm	00000004 u8g2_SetBackgroundColor(_u8g2_font_t*, unsigned short)
60001824 g     F .text.code	00000002 startup_default_middle_hook
200118a8 g     O .bss	00000004 sysEx
0001b050 g     F .text.itcm	00000012 Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)
00008d5c g     F .text.itcm	00000046 MusicScales::getNoteByDegree(unsigned char, signed char)
2000832c g     O .data	000008cd u8g2_font_helvB18_tr
000077d8 g     F .text.itcm	00000002 midifx::MidiFXTranspose::onDisabled()
2000aac0 g       .data	00000000 _edata
00005f3c  w    F .text.itcm	00000002 midifx::MidiFXInterface::onDeselected()
0000746c  w    F .text.itcm	00000014 midifx::MidiFXScaler::~MidiFXScaler()
00002ba0  w    F .text.itcm	0000000e midifx::MidiFXArpeggiator::compareArpNote(midifx::MidiFXArpeggiator::ArpNote, midifx::MidiFXArpeggiator::ArpNote)
000085f0 g     F .text.itcm	00000002 midimacro::MidiMacroNorns::onDisabled()
00011d1c g     F .text.itcm	00000020 OmxModeGrids::onKeyHeldUpdate(OMXKeypadEvent)
0001faf4  w    F .text.itcm	00000002 serialEvent1()
00003f24 g     F .text.itcm	0000008c midifx::MidiFXArpeggiator::changeArpMode(unsigned char)
00018d08 g     F .text.itcm	0000001c SubModeMidiFxGroup::onModeChanged()
0001a294 g     F .text.itcm	0000005c SubModePotConfig::onKeyUpdate(OMXKeypadEvent)
00022504 g     F .text.itcm	00000048 std::length_error::~length_error()
0002943c g     F .text.itcm	00000000 .hidden __gnu_Unwind_Save_WMMXC
2000f234 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
000026fc g     F .text.itcm	00000004 euclidean::EuclideanSequencer::getMute()
000062b0 g     F .text.itcm	00000120 midifx::MidiFXHarmonizer::noteInput(MidiNoteGroup)
0001d5fc g     F .text.itcm	0000000c Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)
00019880 g     F .text.itcm	000000de SubModeMidiFxGroup::noteOutputFunc(MidiNoteGroup)
0000bb24 g     F .text.itcm	00000002 OmxModeChords::onEncoderButtonDownLong()
0002b318 g     F .text.itcm	00000048 __libc_init_array
0001fc78  w    F .text.itcm	00000034 _sbrk
00013354 g     F .text.itcm	00000006 OmxModeMidiKeyboard::InitSetup()
000102b0 g     F .text.itcm	000000b0 OmxModeEuclidean::onKeyHeldUpdate(OMXKeypadEvent)
000134e4 g     F .text.itcm	000000c0 OmxModeMidiKeyboard::onModeActivated()
200029e4 g     O .data	000000a0 vtable for midifx::MidiFXArpeggiator
0000c974 g     F .text.itcm	00000204 OmxModeChords::onKeyUpdateSelMidiFX(OMXKeypadEvent)
00002c7c g     F .text.itcm	00000108 midifx::MidiFXArpeggiator::saveToDisk(int, Storage*)
0000c898 g     F .text.itcm	00000036 OmxModeChords::getEncoderSelect()
00028cd0 g     F .text.itcm	0000002e .hidden _Unwind_VRS_Get
00008da4 g     F .text.itcm	00000010 MusicScales::getScaleColor(unsigned char)
0002e0ac g     F .text.itcm	0000002c _lseek_r
00002d98 g     F .text.itcm	000002a8 midifx::MidiFXArpeggiator::onKeyUpdate(OMXKeypadEvent, unsigned char)
0001e6e0 g     F .text.itcm	0000000c randomSeed(unsigned long)
200004ec g     O .data	00000004 CC1
00029474 g     F .text.itcm	00000022 .hidden _Unwind_Resume
0000ffc8 g     F .text.itcm	00000094 OmxModeEuclidean::onModeActivated()
0000b1ec g     F .text.itcm	0000015c OmxDisp::drawEuclidPattern(bool, bool*, unsigned char, unsigned char, bool, bool, unsigned char)
00017ee8 g     F .text.itcm	00000120 changeStepType(int)
00020c94 g     F .text.itcm	000003d8 usb_midi_read
20011b3c g     O .bss	00000001 RES
200004f8 g     O .data	00000004 CC4
0000d2dc g     F .text.itcm	0000053c OmxModeChords::updateLEDs()
200051b0 g     O .data	000007e9 u8g2_font_6x12_tf
200004f4 g     O .data	00000004 CC3
00005a80 g     F .text.itcm	000001d0 midifx::MidiFXArpeggiator::loopUpdate()
000019f0 g     F .text.itcm	00000012 MM::sendSysEx(unsigned long, unsigned char const*, bool)
0001fef8 g     F .text.itcm	000005bc usb_isr
200119e8 g     O .bss	00000004 usb_midi_handleStop
20002120 g     O .data	00000010 typeinfo name for std::logic_error
000219ec g     F .text.itcm	0000000e std::bad_exception::~bad_exception()
00000074  w    F .text.itcm	00000002 OmxScreensaver::~OmxScreensaver()
000061fc g     F .text.itcm	00000008 midifx::MidiFXHarmonizer::getDispName()
0001a9d0  w    F .text.itcm	00000002 TwoWire::flush()
00006694 g     F .text.itcm	0000004c midifx::MidiFXHarmonizer::MidiFXHarmonizer()
00016e50 g     F .text.itcm	00000082 ParamManager::setPageEnabled(unsigned char, bool)
000015ac g     F .text.itcm	0000003c Encoder::Encoder(unsigned long, unsigned long)
00022300 g     F .text.itcm	0000002c std::type_info::operator==(std::type_info const&) const
0001ccf8 g     F .text.itcm	00000136 Adafruit_GFX::write(unsigned char)
2000f290 g     O .bss	0000177c sequencer
00006720  w    F .text.itcm	00000002 midifx::MidiFXInterface::onDisabled()
200004fc g     O .data	00000004 CC5
00008608 g     F .text.itcm	00000014 midimacro::MidiMacroNorns::onPotChanged(int, int, int, int)
00019048 g     F .text.itcm	00000022 SubModeMidiFxGroup::setSelected(bool)
0001796c g     F .text.itcm	00000008 grids::GridsWrapper::getNoteLength(unsigned char)
0000ac18 g     F .text.itcm	00000224 OmxDisp::dispSlots(char const**, unsigned char, unsigned char, unsigned char, bool, bool, char const**, unsigned char)
200118dc g     O .bss	00000010 tempString
0000b348 g     F .text.itcm	0000008c OMXKeypad::OMXKeypad(unsigned long, unsigned long, unsigned char*, unsigned char*, unsigned char*, int, int)
00022078 g     F .text.itcm	00000010 std::get_terminate()
00005f30  w    F .text.itcm	00000002 midifx::MidiFXInterface::onClockTick()
0002265c g     F .text.itcm	00000034 __cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const
60001620 g     F .text.code	00000030 ResetHandler
000225cc g     F .text.itcm	00000014 std::length_error::length_error(char const*)
0001a2f0 g     F .text.itcm	00000024 SubModePotConfig::onDisabled()
0001337c g     F .text.itcm	00000002 OmxModeMidiKeyboard::onEncoderButtonDownLong()
00006814 g     F .text.itcm	00000028 midifx::MidiFXInterface::setSelected(bool)
000085f0 g     F .text.itcm	00000002 midimacro::MidiMacroNorns::onEnabled()
0002269c g     F .text.itcm	00000014 __cxxabiv1::__class_type_info::~__class_type_info()
60032c48 g       *ABS*	00000000 _sdataload
20003d30 g     O .data	00000064 midiKeyMap
0000990c g     F .text.itcm	00000018 OmxDisp::bumpDisplayTimer()
00007250 g     F .text.itcm	00000008 midifx::MidiFXScaler::getColor()
000027cc g     F .text.itcm	00000006 euclidean::EuclideanSequencer::setMidiChannel(unsigned char)
000150f8 g     F .text.itcm	0000009c OmxModeSequencer::changeSequencerMode(unsigned char)
0001dc30 g     F .text.itcm	00000086 U8G2_FOR_ADAFRUIT_GFX::utf8_next(unsigned char)
0001c614 g     F .text.itcm	000000d4 Adafruit_GFX::drawRect(short, short, short, short, unsigned short)
00018c84 g     F .text.itcm	00000054 SubmodeInterface::onEncoderChanged(Encoder::Update)
0000be80 g     F .text.itcm	000003e0 OmxModeChords::OmxModeChords()
000195e8 g     F .text.itcm	00000014 SubModeMidiFxGroup::isArpOn()
00017670 g     F .text.itcm	0000000c grids::GridsWrapper::gridsTick()
2000b5ac g     O .bss	00000004 EventResponder::lastYield
00006c7c g     F .text.itcm	00000054 midifx::MidiFXMonophonic::MidiFXMonophonic()
0002a3fc g     F .text.itcm	00000040 sprintf
200004f0 g     O .data	00000004 CC2
0002184c g     F .text.itcm	00000000 __cxa_end_cleanup
00018b04  w    F .text.itcm	00000004 EEPROMStorage::isEeprom()
00006d0c g     F .text.itcm	0000007c midifx::MidiFXRandomizer::saveToDisk(int, Storage*)
00006150  w    F .text.itcm	00000014 midifx::MidiFXChance::~MidiFXChance()
0000eadc  w    F .text.itcm	000000e8 void std::vector<OmxModeChords::NoteTracker, std::allocator<OmxModeChords::NoteTracker> >::_M_realloc_insert<OmxModeChords::NoteTracker const&>(__gnu_cxx::__normal_iterator<OmxModeChords::NoteTracker*, std::vector<OmxModeChords::NoteTracker, std::allocator<OmxModeChords::NoteTracker> > >, OmxModeChords::NoteTracker const&)
000222f8 g     F .text.itcm	00000002 std::type_info::~type_info()
00000088  w    F .text.itcm	0000004c OmxModeChords::~OmxModeChords()
00006478 g     F .text.itcm	000001ec midifx::MidiFXHarmonizer::onDisplayUpdate(unsigned char)
0001f474 g     F .text.itcm	00000134 memcpy
2000c800 g     O .bss	0000143c omxModeChords
00005f38  w    F .text.itcm	00000002 midifx::MidiFXInterface::onSelected()
0000c67c g     F .text.itcm	0000021c OmxModeChords::onPotChanged(int, int, int, int)
000097ac g     F .text.itcm	00000054 OmxDisp::dispSymbBox(char const*, short, bool)
0000b990 g     F .text.itcm	00000006 OmxLeds::setDirty()
000222cc g     F .text.itcm	0000002a __cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const
000220e4 g     F .text.itcm	00000058 __cxa_init_primary_exception
00022088 g     F .text.itcm	00000010 std::get_unexpected()
200119c8 g     O .bss	00000004 usb_midi_handleNoteOff
0000b99c g     F .text.itcm	0000001c OmxLeds::showLeds()
00006c4c  w    F .text.itcm	00000014 midifx::MidiFXMonophonic::~MidiFXMonophonic()
0000bb28 g     F .text.itcm	00000020 OmxModeChords::onClockTick()
0002096c g     F .text.itcm	00000010 usb_midi_write_packed
00018f68  w    F .text.itcm	00000028 SubModeMidiFxGroup::~SubModeMidiFxGroup()
000027ec g     F .text.itcm	00000006 euclidean::EuclideanSequencer::setSwing(unsigned char)
2000ba60 g     O .bss	00000154 keypad
00002bc8 g     F .text.itcm	00000008 midifx::MidiFXArpeggiator::onEnabled()
0001be14 g     F .text.itcm	0000039c Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)
0001e80c g     F .text.itcm	00000066 String::copy(char const*, unsigned int)
0001906c g     F .text.itcm	0000003a SubModeMidiFxGroup::setAuxDown(bool)
20009d60 g     O .data	00000006 colPins
0001f638 g     F .text.itcm	0000034c dtostrf
0001640c g     F .text.itcm	0000000c OmxModeSequencer::updateLEDs()
00017c7c g     F .text.itcm	000001e4 auto_reset(int)
00012f70 g     F .text.itcm	0000000c OmxModeGrids::updateLEDs()
00029e88 g     F .text.itcm	0000000c __malloc_unlock
0000a618 g     F .text.itcm	0000029c OmxDisp::dispChordBasicPage(unsigned char, bool, char const*, char const*, char const*, signed char*, float*)
00010d70 g     F .text.itcm	00000320 OmxModeEuclidean::OmxModeEuclidean()
0000557c g     F .text.itcm	00000504 midifx::MidiFXArpeggiator::arpNoteTrigger()
00022658  w    F .text.itcm	00000004 std::string::_Rep::_M_destroy(std::allocator<char> const&)
00002bb4 g     F .text.itcm	00000008 midifx::MidiFXArpeggiator::getName()
00022710 g     F .text.itcm	0000001a __cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const
0001a720 g     F .text.itcm	00000064 ResponsiveAnalogRead::begin(int, bool, float)
00028d64 g     F .text.itcm	00000084 .hidden __gnu_Unwind_Backtrace
0001c390 g     F .text.itcm	00000002 Adafruit_GFX::endWrite()
00009bfc g     F .text.itcm	0000002c OmxDisp::displayMessageTimed(String, unsigned char)
000077dc g     F .text.itcm	00000040 midifx::MidiFXTranspose::saveToDisk(int, Storage*)
0000bb48 g     F .text.itcm	0000005c OmxModeChords::onModeDeactivated()
0002b440 g     F .text.itcm	000000dc strlen
0001cfcc g     F .text.itcm	00000038 Adafruit_Keypad::Adafruit_Keypad(unsigned char*, unsigned char*, unsigned char*, int, int)
00000dfc g     F .text.itcm	00000348 loop
600017cc g     F .text.code	00000054 analog_init
00000260  w    F .text.itcm	0000000e OmxModeSequencer::~OmxModeSequencer()
0002232c g     F .text.itcm	0000010c __gnu_cxx::__verbose_terminate_handler()
000094dc g     F .text.itcm	0000000c OmxDisp::isMessageActive()
000156e0 g     F .text.itcm	0000005c OmxModeSequencer::onEncoderChangedSelectParam(Encoder::Update)
0000dbec g     F .text.itcm	00000044 OmxModeChords::onChordOff(unsigned char)
0002d618 g     F .text.itcm	00000040 __hi0bits
000027b4 g     F .text.itcm	00000006 euclidean::EuclideanSequencer::getSteps()
2000bdc8 g     O .bss	00000004 lastProcessTime
200119c4 g     O .bss	00000004 usb_midi_handleControlChange
0001cee0 g     F .text.itcm	00000012 Adafruit_FRAM_I2C::Adafruit_FRAM_I2C()
0003039c g     F .text.itcm	00000106 _wcsnrtombs_l
00029370 g     F .text.itcm	00000000 .hidden __gnu_Unwind_Restore_VFP
60001828 g     F .text.code	00000002 startup_default_late_hook
00016c5c g     F .text.itcm	0000002c OmxUtil::allOff()
2001196c g     O .bss	00000048 u8g2_display
00002bbc g     F .text.itcm	00000008 midifx::MidiFXArpeggiator::getDispName()
0001378c g     F .text.itcm	000001f8 OmxModeMidiKeyboard::onKeyUpdateSelMidiFX(OMXKeypadEvent)
00007bac  w    F .text.itcm	0000001c midifx::MidiFXTranspose::~MidiFXTranspose()
0000620c g     F .text.itcm	00000002 midifx::MidiFXHarmonizer::onEnabled()
0001e378 g     F .text.itcm	00000004 HardwareSerial::write(unsigned char)
20011b50 g     O .bss	00000001 usb_midi_msg_cable
0001ea30 g     F .text.itcm	00000010 operator+(StringSumHelper const&, String const&)
00018cd8  w    F .text.itcm	00000030 midifx::MidiFXInterface::onNoteInputForwarder(void*, MidiNoteGroup)
0000b520 g     F .text.itcm	00000174 OMXKeypad::tick()
0000982c g     F .text.itcm	0000007c OmxDisp::dispMode()
2000e6f8 g     O .bss	000002d4 omxModeGrids
0001e8fc g     F .text.itcm	00000038 String::String(float, unsigned char)
00008328  w    F .text.itcm	00000014 midimacro::MidiMacroM8::~MidiMacroM8()
000147dc g     F .text.itcm	00000006 OmxModeSequencer::InitSetup()
00018a10 g     F .text.itcm	000000a0 clearPattern(int)
00003260 g     F .text.itcm	000006d4 midifx::MidiFXArpeggiator::onDisplayUpdate(unsigned char)
0001267c g     F .text.itcm	00000160 OmxModeGrids::onKeyUpdateChanLock(OMXKeypadEvent)
0001ea40 g     F .text.itcm	0000001c operator+(StringSumHelper const&, char const*)
00002768 g     F .text.itcm	00000014 euclidean::EuclideanSequencer::setRotation(unsigned char)
00015194 g     F .text.itcm	0000054c OmxModeSequencer::onKeyUpdate(OMXKeypadEvent)
00013744 g     F .text.itcm	0000001c OmxModeMidiKeyboard::SetScale(MusicScales*)
00016c00 g     F .text.itcm	0000005c OmxUtil::midiNoteOff(int, int)
00018bc8 g     F .text.itcm	00000024 Storage::readArray(unsigned int, unsigned char*, int)
000125b4 g     F .text.itcm	000000c8 OmxModeGrids::quickSelectInst(unsigned char)
0000ff50 g     F .text.itcm	00000006 OmxModeEuclidean::InitSetup()
0001bd1c g     F .text.itcm	000000f6 Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)
00008b70 g     F .text.itcm	0000011c MusicScales::calculateScale(unsigned char, unsigned char)
0001a24c g     F .text.itcm	00000002 SubModePotConfig::loopUpdate()
00014510  w    F .text.itcm	00000004 OmxModeMidiKeyboard::doNoteOnForwarder(void*, unsigned char)
000015ac g     F .text.itcm	0000003c Encoder::Encoder(unsigned long, unsigned long)
00014fe4  w    F .text.itcm	0000005c StepNote::CopyFrom(StepNote*)
0000859c g     F .text.itcm	0000004c midimacro::MidiMacroM8::MidiMacroM8()
00019d40 g     F .text.itcm	00000042 SubModeMidiFxGroup::loadFromDisk(int, Storage*)
20048000 g       .text.csf	00000000 _estack
0002e088 g     F .text.itcm	00000024 _isatty_r
00005190 g     F .text.itcm	000000b0 midifx::MidiFXArpeggiator::arpNoteOff(MidiNoteGroup)
000222fc g     F .text.itcm	00000004 std::type_info::__is_pointer_p() const
0001aee4 g     F .text.itcm	0000000c lpi2c3_isr()
200023a0 g     O .data	0000005c vtable for OmxModeEuclidean
000219e0 g     F .text.itcm	00000002 std::bad_exception::~bad_exception()
00021110 g     F .text.itcm	000000b0 usb_seremu_configure
00008290 g     F .text.itcm	00000098 midimacro::MidiMacroM8::onDisplayUpdate()
00016578  w    F .text.itcm	00000002 OmxScreensaver::onEncoderButtonDown()


